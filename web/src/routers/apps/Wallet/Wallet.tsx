import { useRef, useState } from "react";
import { CSSTransition } from "react-transition-group";
import { usePhone } from "../../../store/store";
import circle1 from "../../../../images/wallet_circle1.svg";
import circle2 from "../../../../images/wallet_circle2.svg";
import smrtBankLogo from "../../../../images/smrtbanklogo.svg";
import smrtVecImage from "../../../../images/walletLoginLogo.svg";
import smrtDetail from "../../../../images/smrtDetail.svg";
import { useLocalStorage, useTimeout } from "@mantine/hooks";
import { Autocomplete, Avatar, Button, Checkbox, NumberFormatter, NumberInput, Select, Textarea, Transition } from "@mantine/core";
import { fetchNui } from "../../../hooks/fetchNui";
import { InvoiceData, PhoneContacts, WalletAccount } from "../../../../../types/types";
import { useNuiEvent } from "../../../hooks/useNuiEvent";
import Navigation from "./Navigation";
import Searchbar from "../../components/SearchBar";
import Dialpad from "../../components/dialpad1";
import dayjs from "dayjs";

export default function Wallet(props: { onEnter: () => void, onExit: () => void }) {
    const nodeRef = useRef(null);
    const { location, phoneSettings, setLocation } = usePhone();
    const [showStartupScreen, setShowStartupScreen] = useState(true);
    const [loading, setLoading] = useState(false);
    const newStimeout = useTimeout(() => {
        setShowStartupScreen(false);
    }, 3000);
    const loginTimeout = useTimeout(() => {
        setShowWalletLogin(false);
        setIsWalletLoggedIn(true);
        setLoading(false);
    }, 5000);
    const [showWalletLogin, setShowWalletLogin] = useState(false);
    const [isWalletLoggedIn, setIsWalletLoggedIn] = useLocalStorage({
        key: 'isWalletLoggedIn',
        defaultValue: false,
    });
    const [walletDetails, setWalletDetails] = useState<WalletAccount>({
        _id: '',
        citizenId: '',
        name: '',
        cardNumber: '',
        cardPin: 0,
        bankAccount: '',
        balance: 0,
    });

    useNuiEvent('updateWalletamount', (data: { type: string, amount: number }) => {
        if (data.type === 'remove') {
            setWalletDetails({
                ...walletDetails,
                balance: walletDetails.balance - data.amount,
            });
        } else if (data.type === 'add') {
            setWalletDetails({
                ...walletDetails,
                balance: walletDetails.balance + data.amount,
            });
        }
    });
    const [seachValue, setSearchValue] = useState('');
    const [contactsData, setContactsData] = useState<PhoneContacts[]>([]);
    const [selectedContact, setSelectedContact] = useState<PhoneContacts>({
        _id: '',
        personalNumber: '',
        contactNumber: '',
        firstName: '',
        lastName: '',
        image: '',
        ownerId: '',
        notes: '',
        email: '',
        isFav: false,
    });
    const [showTransferPage, setShowTransferPage] = useState(false);
    const [amount, setAmount] = useState(0);
    const [resaccountNumber, setResAccountNumber] = useState('');
    const [transcationData, setTranscationData] = useState<{
        _id: string,
        from: string,
        to: string,
        amount: number,
        type: string,
        date: string
    }[]>([]);
    const [historyType, setHistoryType] = useState('sent');
    const [showNewInvoicePage, setShowNewInvoicePage] = useState(false);
    const [billingData, setBillingData] = useState({
        description: '',
        amount: 0,
        isBusiness: 'No',
        paymentTime: '',
        numberOfPayments: '',
        receiver: 0,
    });
    const [invoiceData, setInvoiceData] = useState<InvoiceData[]>([]);

    return (
        <CSSTransition
            nodeRef={nodeRef}
            in={location.app === 'wallet'}
            timeout={450}
            classNames="enterandexitfromtop"
            unmountOnExit
            mountOnEnter
            onEntering={async () => {
                props.onEnter();
                newStimeout.start();
                const res = await fetchNui('wallet:login');
                if (res) {
                    setWalletDetails(JSON.parse(res as string));
                }
            }}
            onExited={() => {
                props.onExit();
                setShowStartupScreen(true);
                setShowWalletLogin(false);
                setLocation({
                    app: location.app,
                    page: {
                        ...location.page,
                        wallet: '',
                    }
                })
            }}
        >
            <div
                ref={nodeRef}
                style={{
                    backgroundColor: '#0E0E0E',
                    width: '100%',
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                }}
                className="settings"
            >
                <Transition
                    mounted={showStartupScreen}
                    transition="fade"
                    duration={400}
                    timingFunction="ease"
                    onExit={() => {
                        if (!isWalletLoggedIn) {
                            setShowWalletLogin(true);
                        } else if (isWalletLoggedIn) {
                            setLocation({
                                app: 'wallet',
                                page: {
                                    ...location.page,
                                    wallet: 'home',
                                }
                            });
                        }
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        justifyContent: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(0, 0, 0)',
                        zIndex: 1,
                        bottom: 0,
                    }}>
                        <img src={circle1} alt="circle1" style={{ position: 'absolute', bottom: '-16.00vh', left: '-1.78vh', width: '59%', height: '70%', zIndex: 0 }} />
                        <img src={circle2} alt="circle2" style={{ position: 'absolute', top: '-13.33vh', right: '-1.78vh', width: '59%', height: '60%', zIndex: 0 }} />
                        <img src={smrtBankLogo} alt="smrtBankLogo" style={{ width: '60%', height: 'auto', marginTop: '0', zIndex: 1 }} />
                    </div>}
                </Transition>
                <Transition
                    mounted={showWalletLogin}
                    transition="fade"
                    duration={400}
                    timingFunction="ease"
                    onExit={() => {
                        setLocation({
                            app: 'wallet',
                            page: {
                                ...location.page,
                                wallet: 'home',
                            }
                        });
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        justifyContent: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(0, 0, 0)',
                        zIndex: 1,
                        bottom: 0,
                    }}>
                        <img src={smrtVecImage} alt="smrtBankLogo" style={{ width: '60%', height: 'auto', marginTop: '0', zIndex: 1, marginBottom: '8.33vh' }} />
                        <img src={smrtDetail} alt="smrtBankLogo" style={{ width: '90%', height: 'auto', marginTop: '0', zIndex: 1 }} />
                        <div style={{
                            width: '85%',
                            marginLeft: '7.5%',
                            marginTop: '1.78vh',
                            height: '2.59vh',
                            fontStyle: 'normal',
                            fontWeight: 400,
                            fontSize: '1.11vh',
                            lineHeight: '1.30vh',
                            textAlign: 'center',
                            color: '#666666',
                            flex: 'none',
                            alignSelf: 'stretch',
                            flexGrow: 0,
                        }}>Manage your finances anytime, anywhere with our online banking app.</div>
                        <Button style={{
                            width: '85%',
                            height: '4.44vh',
                            marginTop: '7.11vh',
                            fontSize: '1.60vh',
                            lineHeight: '2.41vh',
                            textAlign: 'center',
                            color: 'white',
                            backgroundColor: 'rgba(255, 255, 255, 0.18)',
                            borderRadius: '1.11vh',
                            border: 'none',
                        }} onClick={async () => {
                            if (phoneSettings.smrtId === '' || phoneSettings.smrtPassword === '') {
                                fetchNui('showNoti', { app: 'settings', title: 'System', description: 'You have to Login your Mail Account' });
                                return;
                            }
                            setLoading(true);
                            loginTimeout.start();
                            const res = await fetchNui('wallet:login');
                            setWalletDetails(JSON.parse(res as string));
                        }} loading={loading}>Let's Go</Button>
                    </div>}
                </Transition>
                <Transition
                    mounted={location.app === "wallet" && location.page.wallet === "home"}
                    transition="pop"
                    duration={400}
                    timingFunction="ease"
                    onEnter={async () => {
                        const res = await fetchNui('getTransactions');
                        setTranscationData(JSON.parse(res as string));
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(12, 12, 12)',
                        zIndex: 1,
                    }}>
                        <div style={{ marginTop: '3.56vh', width: '90%', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                            <div style={{ display: 'flex', flexDirection: 'column' }}>
                                <div className="wallet-header">Good Evening,</div>
                                <div className="wallet-subheader">{walletDetails.name}</div>
                            </div>
                            <svg width="2.59vh" height="2.69vh" viewBox="0 0 28 29" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="0.500244" y="1" width="27" height="27" rx="13.5" stroke="white" />
                                <g clipPath="url(#clip0_295_179)">
                                    <path d="M18.2952 15.93V13.545C18.2939 12.4063 17.841 11.3146 17.0358 10.5094C16.2306 9.70426 15.1389 9.25132 14.0002 9.25C12.8615 9.25132 11.7699 9.70426 10.9647 10.5094C10.1595 11.3146 9.70657 12.4063 9.70524 13.545V15.93L8.75024 16.885V17.84H19.2502V16.885L18.2952 15.93Z" stroke="white" strokeWidth="1.125" strokeMiterlimit="10" />
                                    <path d="M15.3452 17.84C15.4068 17.9993 15.4357 18.1693 15.4302 18.34C15.4302 18.7192 15.2796 19.083 15.0114 19.3511C14.7432 19.6193 14.3795 19.77 14.0002 19.77C13.621 19.77 13.2572 19.6193 12.9891 19.3511C12.7209 19.083 12.5702 18.7192 12.5702 18.34C12.5648 18.1693 12.5937 17.9993 12.6552 17.84" stroke="white" strokeWidth="1.125" strokeMiterlimit="10" />
                                </g>
                                <defs>
                                    <clipPath id="clip0_295_179">
                                        <rect width="12" height="12" fill="white" transform="translate(8.00024 8.5)" />
                                    </clipPath>
                                </defs>
                            </svg>
                        </div>
                        <svg width="29.07vh" height="16.30vh" viewBox="0 0 284 146" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clipPath="url(#clip0_295_188)">
                                <rect x="0.508789" width="283" height="146" rx="20" fill="url(#paint0_linear_295_188)" />
                                <circle opacity="0.61" cx="285.901" cy="11.4729" r="82.027" stroke="white" />
                                <circle opacity="0.61" cx="249.036" cy="-9.47298" r="82.027" stroke="white" />
                                <path d="M29.6816 135.488H26.8257L28.6106 124.519H31.4668L29.6816 135.488ZM24.4231 124.519L21.7004 132.064L21.3782 130.439L20.4175 125.506C20.4175 125.506 20.3013 124.519 19.0628 124.519H14.5616L14.5088 124.704C14.5088 124.704 15.8853 124.991 17.4962 125.958L19.9774 135.488H22.953L27.4968 124.519H24.4231ZM39.5722 127.157L39.9797 124.801C39.9797 124.801 38.7221 124.323 37.4111 124.323C35.9938 124.323 32.6282 124.942 32.6282 127.954C32.6282 130.788 36.5783 130.823 36.5783 132.312C36.5783 133.8 33.0352 133.534 31.8659 132.595L31.4413 135.058C31.4413 135.058 32.7165 135.677 34.6649 135.677C36.6138 135.677 39.554 134.668 39.554 131.922C39.554 129.07 35.5684 128.804 35.5684 127.564C35.5686 126.324 38.35 126.483 39.5722 127.157Z" fill="white" />
                                <path d="M21.3785 130.439L20.4175 125.506C20.4175 125.506 20.3013 124.518 19.0628 124.518H14.5616L14.5088 124.704C14.5088 124.704 16.6722 125.152 18.7473 126.832C20.7315 128.438 21.3785 130.439 21.3785 130.439Z" fill="#E6A540" />
                                <foreignObject x="30" y="26.5" width="220" height="30" style={{ backgroundColor: '' }}>
                                    <div style={{
                                        width: '220px',
                                        height: '30px',
                                        fontSize: '20px',
                                        fontWeight: 600,
                                    }}>
                                        <NumberFormatter value={walletDetails.balance} thousandSeparator />
                                    </div>
                                </foreignObject>
                                <foreignObject x="150" y="122" width="120" height="20" style={{ backgroundColor: '' }}>
                                    <div style={{
                                        width: '120px',
                                        height: '20px',
                                        fontSize: '12px',
                                        fontWeight: 400,
                                        textAlign: 'center',
                                    }}>
                                        {walletDetails.cardNumber.replace(/(\d{4})(?=\d)/g, '$1 ')}
                                    </div>
                                </foreignObject>
                                <path d="M14.7389 18.4545H15.6466L17.4619 21.5099H17.5386L19.354 18.4545H20.2616L17.8966 22.3026V25H17.104V22.3026L14.7389 18.4545ZM22.4845 25.1023C22.0413 25.1023 21.6524 24.9968 21.3179 24.7859C20.9855 24.5749 20.7256 24.2798 20.5381 23.9006C20.3527 23.5213 20.26 23.0781 20.26 22.571C20.26 22.0597 20.3527 21.6133 20.5381 21.2319C20.7256 20.8505 20.9855 20.5543 21.3179 20.3434C21.6524 20.1325 22.0413 20.027 22.4845 20.027C22.9276 20.027 23.3154 20.1325 23.6478 20.3434C23.9823 20.5543 24.2423 20.8505 24.4276 21.2319C24.6151 21.6133 24.7089 22.0597 24.7089 22.571C24.7089 23.0781 24.6151 23.5213 24.4276 23.9006C24.2423 24.2798 23.9823 24.5749 23.6478 24.7859C23.3154 24.9968 22.9276 25.1023 22.4845 25.1023ZM22.4845 24.4247C22.8211 24.4247 23.0981 24.3384 23.3154 24.1658C23.5328 23.9933 23.6936 23.7663 23.798 23.4851C23.9024 23.2038 23.9546 22.8991 23.9546 22.571C23.9546 22.2429 23.9024 21.9371 23.798 21.6538C23.6936 21.3704 23.5328 21.1413 23.3154 20.9666C23.0981 20.7919 22.8211 20.7045 22.4845 20.7045C22.1478 20.7045 21.8708 20.7919 21.6535 20.9666C21.4362 21.1413 21.2753 21.3704 21.1709 21.6538C21.0665 21.9371 21.0143 22.2429 21.0143 22.571C21.0143 22.8991 21.0665 23.2038 21.1709 23.4851C21.2753 23.7663 21.4362 23.9933 21.6535 24.1658C21.8708 24.3384 22.1478 24.4247 22.4845 24.4247ZM28.954 22.9929V20.0909H29.7083V25H28.954V24.169H28.9029C28.7878 24.4183 28.6088 24.6303 28.3659 24.805C28.123 24.9776 27.8162 25.0639 27.4455 25.0639C27.1387 25.0639 26.8659 24.9968 26.6273 24.8626C26.3887 24.7262 26.2012 24.5217 26.0648 24.2489C25.9284 23.9741 25.8603 23.6278 25.8603 23.2102V20.0909H26.6145V23.1591C26.6145 23.517 26.7147 23.8026 26.915 24.0156C27.1174 24.2287 27.3752 24.3352 27.6884 24.3352C27.8759 24.3352 28.0666 24.2873 28.2605 24.1914C28.4565 24.0955 28.6206 23.9485 28.7527 23.7504C28.8869 23.5522 28.954 23.2997 28.954 22.9929ZM31.0898 25V20.0909H31.8184V20.8324H31.8696C31.9591 20.5895 32.121 20.3924 32.3554 20.2411C32.5898 20.0898 32.854 20.0142 33.148 20.0142C33.2034 20.0142 33.2726 20.0153 33.3557 20.0174C33.4388 20.0195 33.5017 20.0227 33.5443 20.027V20.794C33.5187 20.7876 33.4601 20.7781 33.3685 20.7653C33.279 20.7504 33.1842 20.7429 33.0841 20.7429C32.8454 20.7429 32.6324 20.793 32.4449 20.8931C32.2595 20.9911 32.1125 21.1275 32.0038 21.3022C31.8973 21.4748 31.844 21.6719 31.844 21.8935V25H31.0898ZM37.0719 25V18.4545H39.3603C39.8162 18.4545 40.1923 18.5334 40.4885 18.6911C40.7846 18.8466 41.0051 19.0565 41.15 19.3207C41.2949 19.5827 41.3674 19.8736 41.3674 20.1932C41.3674 20.4744 41.3173 20.7067 41.2172 20.8899C41.1191 21.0732 40.9892 21.218 40.8272 21.3246C40.6674 21.4311 40.4938 21.5099 40.3063 21.5611V21.625C40.5066 21.6378 40.7079 21.7081 40.9103 21.8359C41.1127 21.9638 41.2821 22.147 41.4185 22.3857C41.5549 22.6243 41.623 22.9162 41.623 23.2614C41.623 23.5895 41.5485 23.8846 41.3993 24.1467C41.2502 24.4087 41.0147 24.6165 40.693 24.7699C40.3713 24.9233 39.9526 25 39.437 25H37.0719ZM37.8645 24.2969H39.437C39.9547 24.2969 40.3223 24.1967 40.5396 23.9964C40.7591 23.794 40.8688 23.549 40.8688 23.2614C40.8688 23.0398 40.8123 22.8352 40.6994 22.6477C40.5865 22.4581 40.4256 22.3068 40.2168 22.1939C40.008 22.0788 39.7608 22.0213 39.4753 22.0213H37.8645V24.2969ZM37.8645 21.331H39.3347C39.5733 21.331 39.7885 21.2841 39.9803 21.1903C40.1742 21.0966 40.3276 20.9645 40.4405 20.794C40.5556 20.6236 40.6131 20.4233 40.6131 20.1932C40.6131 19.9055 40.513 19.6616 40.3127 19.4613C40.1124 19.2589 39.7949 19.1577 39.3603 19.1577H37.8645V21.331ZM44.2678 25.1151C43.9567 25.1151 43.6744 25.0565 43.4208 24.9393C43.1673 24.82 42.9659 24.6484 42.8168 24.4247C42.6676 24.1989 42.593 23.9261 42.593 23.6065C42.593 23.3253 42.6484 23.0973 42.7592 22.9226C42.87 22.7457 43.0181 22.6072 43.2035 22.5071C43.3888 22.407 43.5934 22.3324 43.8171 22.2834C44.043 22.2322 44.2699 22.1918 44.4979 22.1619C44.7962 22.1236 45.038 22.0948 45.2234 22.0756C45.4109 22.0543 45.5472 22.0192 45.6325 21.9702C45.7198 21.9212 45.7635 21.8359 45.7635 21.7145V21.6889C45.7635 21.3736 45.6772 21.1286 45.5046 20.9538C45.3342 20.7791 45.0753 20.6918 44.728 20.6918C44.3679 20.6918 44.0856 20.7706 43.881 20.9283C43.6765 21.0859 43.5327 21.2543 43.4496 21.4332L42.7337 21.1776C42.8615 20.8793 43.032 20.647 43.245 20.4808C43.4602 20.3125 43.6946 20.1953 43.9482 20.1293C44.2038 20.0611 44.4553 20.027 44.7024 20.027C44.8601 20.027 45.0412 20.0462 45.2457 20.0845C45.4524 20.1207 45.6516 20.1964 45.8434 20.3114C46.0373 20.4265 46.1982 20.6001 46.326 20.8324C46.4538 21.0646 46.5178 21.3757 46.5178 21.7656V25H45.7635V24.3352H45.7251C45.674 24.4418 45.5888 24.5558 45.4695 24.6772C45.3501 24.7987 45.1914 24.902 44.9933 24.9872C44.7951 25.0724 44.5533 25.1151 44.2678 25.1151ZM44.3828 24.4375C44.6811 24.4375 44.9325 24.3789 45.1371 24.2617C45.3438 24.1445 45.4993 23.9933 45.6037 23.8079C45.7102 23.6225 45.7635 23.4276 45.7635 23.223V22.5327C45.7315 22.571 45.6612 22.6062 45.5526 22.6381C45.446 22.668 45.3224 22.6946 45.1818 22.718C45.0433 22.7393 44.908 22.7585 44.7759 22.7756C44.646 22.7905 44.5405 22.8033 44.4595 22.8139C44.2635 22.8395 44.0803 22.881 43.9098 22.9386C43.7415 22.994 43.6051 23.0781 43.5007 23.1911C43.3984 23.3018 43.3473 23.4531 43.3473 23.6449C43.3473 23.907 43.4442 24.1051 43.6381 24.2393C43.8342 24.3714 44.0824 24.4375 44.3828 24.4375ZM48.6487 18.4545V25H47.8944V18.4545H48.6487ZM51.4748 25.1151C51.1637 25.1151 50.8814 25.0565 50.6278 24.9393C50.3743 24.82 50.1729 24.6484 50.0238 24.4247C49.8746 24.1989 49.8001 23.9261 49.8001 23.6065C49.8001 23.3253 49.8555 23.0973 49.9663 22.9226C50.0771 22.7457 50.2251 22.6072 50.4105 22.5071C50.5959 22.407 50.8004 22.3324 51.0241 22.2834C51.25 22.2322 51.4769 22.1918 51.7049 22.1619C52.0032 22.1236 52.245 22.0948 52.4304 22.0756C52.6179 22.0543 52.7543 22.0192 52.8395 21.9702C52.9268 21.9212 52.9705 21.8359 52.9705 21.7145V21.6889C52.9705 21.3736 52.8842 21.1286 52.7116 20.9538C52.5412 20.7791 52.2823 20.6918 51.935 20.6918C51.5749 20.6918 51.2926 20.7706 51.0881 20.9283C50.8835 21.0859 50.7397 21.2543 50.6566 21.4332L49.9407 21.1776C50.0685 20.8793 50.239 20.647 50.4521 20.4808C50.6673 20.3125 50.9016 20.1953 51.1552 20.1293C51.4109 20.0611 51.6623 20.027 51.9094 20.027C52.0671 20.027 52.2482 20.0462 52.4528 20.0845C52.6594 20.1207 52.8587 20.1964 53.0504 20.3114C53.2443 20.4265 53.4052 20.6001 53.533 20.8324C53.6609 21.0646 53.7248 21.3757 53.7248 21.7656V25H52.9705V24.3352H52.9322C52.881 24.4418 52.7958 24.5558 52.6765 24.6772C52.5572 24.7987 52.3984 24.902 52.2003 24.9872C52.0021 25.0724 51.7603 25.1151 51.4748 25.1151ZM51.5898 24.4375C51.8881 24.4375 52.1396 24.3789 52.3441 24.2617C52.5508 24.1445 52.7063 23.9933 52.8107 23.8079C52.9173 23.6225 52.9705 23.4276 52.9705 23.223V22.5327C52.9386 22.571 52.8683 22.6062 52.7596 22.6381C52.6531 22.668 52.5295 22.6946 52.3888 22.718C52.2504 22.7393 52.1151 22.7585 51.983 22.7756C51.853 22.7905 51.7475 22.8033 51.6665 22.8139C51.4705 22.8395 51.2873 22.881 51.1168 22.9386C50.9485 22.994 50.8121 23.0781 50.7077 23.1911C50.6055 23.3018 50.5543 23.4531 50.5543 23.6449C50.5543 23.907 50.6513 24.1051 50.8452 24.2393C51.0412 24.3714 51.2894 24.4375 51.5898 24.4375ZM55.8557 22.0469V25H55.1015V20.0909H55.8302V20.858H55.8941C56.0091 20.6087 56.1839 20.4084 56.4182 20.2571C56.6526 20.1037 56.9552 20.027 57.3259 20.027C57.6583 20.027 57.9491 20.0952 58.1984 20.2315C58.4477 20.3658 58.6416 20.5703 58.7801 20.8452C58.9186 21.1179 58.9878 21.4631 58.9878 21.8807V25H58.2336V21.9318C58.2336 21.5462 58.1334 21.2457 57.9332 21.0305C57.7329 20.8132 57.458 20.7045 57.1086 20.7045C56.8678 20.7045 56.6526 20.7567 56.463 20.8612C56.2755 20.9656 56.1274 21.1179 56.0187 21.3182C55.9101 21.5185 55.8557 21.7614 55.8557 22.0469ZM62.3604 25.1023C61.9002 25.1023 61.5039 24.9936 61.1715 24.7763C60.8391 24.5589 60.5835 24.2596 60.4045 23.8782C60.2255 23.4968 60.136 23.0611 60.136 22.571C60.136 22.0724 60.2276 21.6325 60.4109 21.2511C60.5962 20.8675 60.854 20.5682 61.1843 20.353C61.5167 20.1357 61.9045 20.027 62.3477 20.027C62.6928 20.027 63.0039 20.0909 63.2809 20.2188C63.5579 20.3466 63.7848 20.5256 63.9616 20.7557C64.1385 20.9858 64.2482 21.2543 64.2908 21.5611H63.5366C63.479 21.3374 63.3512 21.1392 63.1531 20.9666C62.957 20.7919 62.6928 20.7045 62.3604 20.7045C62.0664 20.7045 61.8086 20.7812 61.587 20.9347C61.3675 21.0859 61.196 21.3001 61.0724 21.5771C60.951 21.8519 60.8903 22.1747 60.8903 22.5455C60.8903 22.9247 60.9499 23.255 61.0692 23.5362C61.1907 23.8175 61.3612 24.0359 61.5806 24.1914C61.8022 24.3469 62.0621 24.4247 62.3604 24.4247C62.5565 24.4247 62.7344 24.3906 62.8942 24.3224C63.054 24.2543 63.1893 24.1562 63.3001 24.0284C63.4109 23.9006 63.4897 23.7472 63.5366 23.5682H64.2908C64.2482 23.858 64.1428 24.119 63.9744 24.3512C63.8082 24.5813 63.5877 24.7646 63.3129 24.9009C63.0401 25.0352 62.7227 25.1023 62.3604 25.1023ZM67.4517 25.1023C66.9787 25.1023 66.5707 24.9979 66.2276 24.7891C65.8867 24.5781 65.6236 24.2841 65.4382 23.907C65.255 23.5277 65.1634 23.0866 65.1634 22.5838C65.1634 22.081 65.255 21.6378 65.4382 21.2543C65.6236 20.8686 65.8814 20.5682 66.2116 20.353C66.544 20.1357 66.9318 20.027 67.375 20.027C67.6307 20.027 67.8832 20.0696 68.1325 20.1548C68.3817 20.2401 68.6087 20.3786 68.8132 20.5703C69.0178 20.7599 69.1808 21.0114 69.3022 21.3246C69.4237 21.6378 69.4844 22.0234 69.4844 22.4815V22.8011H65.7003V22.1491H68.7173C68.7173 21.8722 68.6619 21.625 68.5511 21.4077C68.4425 21.1903 68.2869 21.0188 68.0845 20.8931C67.8842 20.7674 67.6477 20.7045 67.375 20.7045C67.0746 20.7045 66.8146 20.7791 66.5952 20.9283C66.3778 21.0753 66.2106 21.267 66.0934 21.5036C65.9762 21.7401 65.9176 21.9936 65.9176 22.2642V22.6989C65.9176 23.0696 65.9815 23.3839 66.1094 23.6417C66.2393 23.8974 66.4194 24.0923 66.6495 24.2266C66.8796 24.3587 67.147 24.4247 67.4517 24.4247C67.6499 24.4247 67.8288 24.397 67.9886 24.3416C68.1506 24.2841 68.2901 24.1989 68.4073 24.0859C68.5245 23.9709 68.6151 23.8281 68.679 23.6577L69.4077 23.8622C69.331 24.1094 69.2021 24.3267 69.021 24.5142C68.8398 24.6996 68.6161 24.8445 68.3498 24.9489C68.0835 25.0511 67.7841 25.1023 67.4517 25.1023ZM71.1815 25.0511C71.0238 25.0511 70.8885 24.9947 70.7756 24.8817C70.6626 24.7688 70.6062 24.6335 70.6062 24.4759C70.6062 24.3182 70.6626 24.1829 70.7756 24.07C70.8885 23.957 71.0238 23.9006 71.1815 23.9006C71.3391 23.9006 71.4744 23.957 71.5874 24.07C71.7003 24.1829 71.7567 24.3182 71.7567 24.4759C71.7567 24.5803 71.7301 24.6761 71.6768 24.7635C71.6257 24.8509 71.5565 24.9212 71.4691 24.9744C71.3839 25.0256 71.288 25.0511 71.1815 25.0511ZM71.1815 21.4077C71.0238 21.4077 70.8885 21.3512 70.7756 21.2383C70.6626 21.1254 70.6062 20.9901 70.6062 20.8324C70.6062 20.6747 70.6626 20.5394 70.7756 20.4265C70.8885 20.3136 71.0238 20.2571 71.1815 20.2571C71.3391 20.2571 71.4744 20.3136 71.5874 20.4265C71.7003 20.5394 71.7567 20.6747 71.7567 20.8324C71.7567 20.9368 71.7301 21.0327 71.6768 21.12C71.6257 21.2074 71.5565 21.2777 71.4691 21.331C71.3839 21.3821 71.288 21.4077 71.1815 21.4077Z" fill="white" />
                                <path d="M21.7451 49.3379H20.3682V48.0879C17.3018 47.9121 15.4365 46.3691 15.4268 43.9766H18.2197C18.2881 44.9922 19.1279 45.7344 20.3682 45.8711V42.0625L19.333 41.8184C16.9795 41.2715 15.7197 39.9141 15.7197 37.8828C15.7197 35.4902 17.4385 33.9473 20.3682 33.7129V32.375H21.7451V33.7227C24.4795 33.9668 26.2373 35.5684 26.2764 37.8145H23.5615C23.5322 36.8867 22.79 36.125 21.7451 35.9785V39.6211L22.79 39.8262C25.29 40.373 26.54 41.6719 26.54 43.791C26.54 46.2715 24.8115 47.8145 21.7451 48.0781V49.3379ZM23.7764 44.1035C23.7764 43.1562 23.1318 42.5801 21.7451 42.3066V45.8809C23.0244 45.8027 23.7764 45.1387 23.7764 44.1035ZM18.542 37.6387C18.542 38.498 19.1768 39.084 20.3682 39.3379V35.9688C19.3037 36.0273 18.542 36.7109 18.542 37.6387Z" fill="white" />
                                <g clipPath="url(#clip1_295_188)">
                                    <path d="M258.498 25.1142C259.113 25.1142 259.612 24.6154 259.612 24C259.612 23.3847 259.113 22.8859 258.498 22.8859C257.883 22.8859 257.384 23.3847 257.384 24C257.384 24.6154 257.883 25.1142 258.498 25.1142Z" stroke="white" strokeMiterlimit="10" />
                                    <path d="M263.509 25.1142C264.124 25.1142 264.623 24.6154 264.623 24C264.623 23.3847 264.124 22.8859 263.509 22.8859C262.893 22.8859 262.395 23.3847 262.395 24C262.395 24.6154 262.893 25.1142 263.509 25.1142Z" stroke="white" strokeMiterlimit="10" />
                                    <path d="M268.52 25.1142C269.135 25.1142 269.634 24.6154 269.634 24C269.634 23.3847 269.135 22.8859 268.52 22.8859C267.904 22.8859 267.406 23.3847 267.406 24C267.406 24.6154 267.904 25.1142 268.52 25.1142Z" stroke="white" strokeMiterlimit="10" />
                                </g>
                            </g>
                            <defs>
                                <linearGradient id="paint0_linear_295_188" x1="-31.953" y1="-8.01219" x2="316.428" y2="135.387" gradientUnits="userSpaceOnUse">
                                    <stop stopColor="#CE2035" />
                                    <stop offset="1" stopColor="#00256C" />
                                </linearGradient>
                                <clipPath id="clip0_295_188">
                                    <rect x="0.508789" width="283" height="146" rx="20" fill="white" />
                                </clipPath>
                                <clipPath id="clip1_295_188">
                                    <rect width="14" height="14" fill="white" transform="translate(256.509 17)" />
                                </clipPath>
                            </defs>
                        </svg>
                        <div style={{
                            width: '90%',
                            display: 'flex',
                            gap: '5.33vh',
                            justifyContent: 'center',
                        }}>
                            <svg onClick={() => {
                                setLocation({
                                    app: 'wallet',
                                    page: {
                                        ...location.page,
                                        wallet: 'transfer'
                                    }
                                });
                            }} className='clickanimation' width="3.70vh" height="6.57vh" viewBox="0 0 40 71" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="0.500244" y="0.5" width="39" height="39" rx="9.5" fill="#565656" />
                                <rect x="0.500244" y="0.5" width="39" height="39" rx="9.5" stroke="#565656" />
                                <path d="M24.3752 15.625L15.0002 25" stroke="white" strokeWidth="1.5" strokeMiterlimit="10" />
                                <path d="M24.3752 24.2188V15.625H15.7815" stroke="white" strokeWidth="1.5" strokeMiterlimit="10" />
                                <path d="M7.29126 59.6738H8.35181C8.45142 60.5879 9.3186 61.1914 10.5256 61.1914C11.6682 61.1914 12.5002 60.5879 12.5002 59.7559C12.5002 59.041 12.0022 58.6016 10.8655 58.3086L9.78149 58.0273C8.2229 57.6289 7.53149 56.9434 7.53149 55.7949C7.53149 54.3887 8.76196 53.4043 10.5198 53.4043C12.2014 53.4043 13.4202 54.4004 13.467 55.8184H12.4124C12.3186 54.9102 11.5862 54.3535 10.4846 54.3535C9.38892 54.3535 8.6272 54.9219 8.6272 55.748C8.6272 56.3867 9.09595 56.7676 10.2444 57.0664L11.1292 57.3008C12.8811 57.7402 13.5901 58.4141 13.5901 59.627C13.5901 61.1738 12.3713 62.1406 10.426 62.1406C8.63306 62.1406 7.39087 61.168 7.29126 59.6738ZM17.1057 56.6855C16.1506 56.6855 15.4827 57.418 15.4182 58.4316H18.7288C18.7053 57.4121 18.0667 56.6855 17.1057 56.6855ZM18.7053 60.2539H19.7073C19.5315 61.3203 18.5002 62.1055 17.1702 62.1055C15.4241 62.1055 14.3635 60.8926 14.3635 58.9766C14.3635 57.084 15.4417 55.8008 17.1233 55.8008C18.7698 55.8008 19.7834 56.9961 19.7834 58.8418V59.2285H15.4124V59.2871C15.4124 60.4531 16.0979 61.2207 17.1936 61.2207C17.967 61.2207 18.5354 60.8281 18.7053 60.2539ZM20.8147 62V55.9062H21.7756V56.8789H21.7991C22.1389 56.2227 22.7893 55.8008 23.7327 55.8008C25.0686 55.8008 25.842 56.6621 25.842 58.0449V62H24.8225V58.2266C24.8225 57.2422 24.3596 56.7031 23.4221 56.7031C22.4612 56.7031 21.8342 57.3828 21.8342 58.4141V62H20.8147ZM29.4514 62.1055C27.8987 62.1055 26.844 60.8633 26.844 58.9531C26.844 57.043 27.8928 55.8008 29.428 55.8008C30.301 55.8008 31.0042 56.2285 31.3674 56.8965H31.3909V53.5449H32.4104V62H31.4377V60.9688H31.4202C31.0276 61.6719 30.3303 62.1055 29.4514 62.1055ZM29.6448 56.6973C28.5667 56.6973 27.887 57.5762 27.887 58.9531C27.887 60.3359 28.5667 61.209 29.6448 61.209C30.6936 61.209 31.3967 60.3184 31.3967 58.9531C31.3967 57.5938 30.6936 56.6973 29.6448 56.6973Z" fill="#565656" />
                            </svg>
                            <svg onClick={() => {
                                setShowNewInvoicePage(true);
                            }} className='clickanimation' width="3.80vh" height="6.57vh" viewBox="0 0 41 71" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="0.833496" y="0.5" width="39" height="39" rx="9.5" fill="#565656" />
                                <rect x="0.833496" y="0.5" width="39" height="39" rx="9.5" stroke="#565656" />
                                <path d="M15.0455 19.0444H13.9959C12.8727 19.0444 11.9604 18.1322 11.9604 17.009V14.5354C11.9604 13.4139 12.8727 12.5 13.9959 12.5H26.6711C27.7942 12.5 28.7065 13.4123 28.7065 14.5354V16.8112C28.7065 17.9343 27.7942 18.8466 26.6711 18.8466H24.7485V17.7954H26.6711C27.2139 17.7954 27.6569 17.354 27.6569 16.8095V14.5354C27.6569 13.9926 27.2155 13.5496 26.6711 13.5496H13.9959C13.4531 13.5496 13.01 13.991 13.01 14.5354V17.0074C13.01 17.5501 13.4515 17.9932 13.9959 17.9932H15.0455V19.0444Z" fill="white" />
                                <path d="M15.3953 27.5C15.3348 27.5 15.2743 27.4902 15.2139 27.4673C15.0062 27.3921 14.8705 27.1943 14.8705 26.9752V15.773C14.8705 15.482 15.106 15.2482 15.3953 15.2482H25.2733C25.5643 15.2482 25.7981 15.4837 25.7981 15.773V18.1926C25.7981 18.4837 25.5626 18.7174 25.2733 18.7174C24.9822 18.7174 24.7485 18.482 24.7485 18.1926V16.2978H15.9201V25.5496L16.3893 24.9986C16.4842 24.8858 16.6248 24.8204 16.7719 24.8155C16.919 24.8106 17.0629 24.8678 17.1659 24.9741L18.4166 26.2591L20.0073 24.9757C20.21 24.8123 20.5043 24.8221 20.6972 25.0019L22.0395 26.2608L23.506 24.9872C23.7234 24.7992 24.0504 24.8204 24.2416 25.033L24.7452 25.597V21.1861C24.7452 20.8951 24.9806 20.6613 25.27 20.6613C25.561 20.6613 25.7948 20.8967 25.7948 21.1861V26.9752C25.7948 27.1943 25.6607 27.3888 25.4564 27.4657C25.252 27.5425 25.0231 27.4869 24.876 27.3251L23.7986 26.1202L22.3648 27.3643C22.1621 27.5409 21.858 27.5343 21.6602 27.3512L20.3049 26.0809L18.6978 27.3774C18.4852 27.5474 18.1812 27.5294 17.9915 27.3349L16.8095 26.1202L15.7877 27.3169C15.6929 27.4362 15.5457 27.5 15.3953 27.5Z" fill="white" />
                                <path d="M26.1119 16.2602H14.5534C14.2624 16.2602 14.0286 16.0248 14.0286 15.7354C14.0286 15.4444 14.264 15.2106 14.5534 15.2106H26.1119C26.403 15.2106 26.6367 15.446 26.6367 15.7354C26.6384 16.0248 26.403 16.2602 26.1119 16.2602ZM22.7964 20.0368H17.8705C17.5812 20.0368 17.3457 19.7997 17.3457 19.512C17.3457 19.2226 17.5828 18.9872 17.8705 18.9872H22.7964C23.0858 18.9872 23.3212 19.2243 23.3212 19.512C23.3212 19.7997 23.0858 20.0368 22.7964 20.0368ZM22.7964 22.9289H17.8705C17.5812 22.9289 17.3457 22.6918 17.3457 22.4041C17.3457 22.1147 17.5828 21.8793 17.8705 21.8793H22.7964C23.0858 21.8793 23.3212 22.1163 23.3212 22.4041C23.3212 22.6918 23.0858 22.9289 22.7964 22.9289Z" fill="white" />
                                <path d="M7.62451 54.6738H8.68506C8.78467 55.5879 9.65186 56.1914 10.8589 56.1914C12.0015 56.1914 12.8335 55.5879 12.8335 54.7559C12.8335 54.041 12.3354 53.6016 11.1987 53.3086L10.1147 53.0273C8.55615 52.6289 7.86475 51.9434 7.86475 50.7949C7.86475 49.3887 9.09521 48.4043 10.853 48.4043C12.5347 48.4043 13.7534 49.4004 13.8003 50.8184H12.7456C12.6519 49.9102 11.9194 49.3535 10.8179 49.3535C9.72217 49.3535 8.96045 49.9219 8.96045 50.748C8.96045 51.3867 9.4292 51.7676 10.5776 52.0664L11.4624 52.3008C13.2144 52.7402 13.9233 53.4141 13.9233 54.627C13.9233 56.1738 12.7046 57.1406 10.7593 57.1406C8.96631 57.1406 7.72412 56.168 7.62451 54.6738ZM17.439 51.6855C16.4839 51.6855 15.8159 52.418 15.7515 53.4316H19.062C19.0386 52.4121 18.3999 51.6855 17.439 51.6855ZM19.0386 55.2539H20.0405C19.8647 56.3203 18.8335 57.1055 17.5034 57.1055C15.7573 57.1055 14.6968 55.8926 14.6968 53.9766C14.6968 52.084 15.7749 50.8008 17.4565 50.8008C19.103 50.8008 20.1167 51.9961 20.1167 53.8418V54.2285H15.7456V54.2871C15.7456 55.4531 16.4312 56.2207 17.5269 56.2207C18.3003 56.2207 18.8687 55.8281 19.0386 55.2539ZM21.1479 57V50.9062H22.1089V51.8789H22.1323C22.4722 51.2227 23.1226 50.8008 24.0659 50.8008C25.4019 50.8008 26.1753 51.6621 26.1753 53.0449V57H25.1558V53.2266C25.1558 52.2422 24.6929 51.7031 23.7554 51.7031C22.7944 51.7031 22.1675 52.3828 22.1675 53.4141V57H21.1479ZM29.7847 57.1055C28.2319 57.1055 27.1772 55.8633 27.1772 53.9531C27.1772 52.043 28.2261 50.8008 29.7612 50.8008C30.6343 50.8008 31.3374 51.2285 31.7007 51.8965H31.7241V48.5449H32.7437V57H31.771V55.9688H31.7534C31.3608 56.6719 30.6636 57.1055 29.7847 57.1055ZM29.978 51.6973C28.8999 51.6973 28.2202 52.5762 28.2202 53.9531C28.2202 55.3359 28.8999 56.209 29.978 56.209C31.0269 56.209 31.73 55.3184 31.73 53.9531C31.73 52.5938 31.0269 51.6973 29.978 51.6973ZM4.39014 69H3.33545V60.5449H4.39014V69ZM5.87256 69V62.9062H6.8335V63.8789H6.85693C7.19678 63.2227 7.84717 62.8008 8.79053 62.8008C10.1265 62.8008 10.8999 63.6621 10.8999 65.0449V69H9.88037V65.2266C9.88037 64.2422 9.41748 63.7031 8.47998 63.7031C7.51904 63.7031 6.89209 64.3828 6.89209 65.4141V69H5.87256ZM17.1987 62.9062L14.9604 69H13.9175L11.6733 62.9062H12.7456L14.4272 67.916H14.4507L16.1382 62.9062H17.1987ZM20.3511 69.1055C18.6636 69.1055 17.5269 67.8926 17.5269 65.9531C17.5269 64.0078 18.6636 62.8008 20.3511 62.8008C22.0327 62.8008 23.1694 64.0078 23.1694 65.9531C23.1694 67.8926 22.0327 69.1055 20.3511 69.1055ZM20.3511 68.209C21.4292 68.209 22.1323 67.3887 22.1323 65.9531C22.1323 64.5176 21.4292 63.6973 20.3511 63.6973C19.2729 63.6973 18.564 64.5176 18.564 65.9531C18.564 67.3887 19.2729 68.209 20.3511 68.209ZM24.2534 69V62.9062H25.2729V69H24.2534ZM24.7632 61.8809C24.4175 61.8809 24.1304 61.5938 24.1304 61.248C24.1304 60.8965 24.4175 60.6152 24.7632 60.6152C25.1147 60.6152 25.4019 60.8965 25.4019 61.248C25.4019 61.5938 25.1147 61.8809 24.7632 61.8809ZM31.7124 64.9043H30.7163C30.5698 64.2422 30.0542 63.6973 29.1577 63.6973C28.103 63.6973 27.3882 64.5703 27.3882 65.9531C27.3882 67.3711 28.1147 68.209 29.1694 68.209C30.0015 68.209 30.5464 67.7695 30.7222 67.0371H31.7241C31.5659 68.25 30.5464 69.1055 29.1636 69.1055C27.4761 69.1055 26.3511 67.916 26.3511 65.9531C26.3511 64.0312 27.4702 62.8008 29.1519 62.8008C30.6753 62.8008 31.5835 63.8086 31.7124 64.9043ZM35.105 63.6855C34.1499 63.6855 33.4819 64.418 33.4175 65.4316H36.728C36.7046 64.4121 36.0659 63.6855 35.105 63.6855ZM36.7046 67.2539H37.7065C37.5308 68.3203 36.4995 69.1055 35.1694 69.1055C33.4233 69.1055 32.3628 67.8926 32.3628 65.9766C32.3628 64.084 33.4409 62.8008 35.1226 62.8008C36.769 62.8008 37.7827 63.9961 37.7827 65.8418V66.2285H33.4116V66.2871C33.4116 67.4531 34.0972 68.2207 35.1929 68.2207C35.9663 68.2207 36.5347 67.8281 36.7046 67.2539Z" fill="#565656" />
                            </svg>
                            <svg className='clickanimation' width="3.89vh" height="6.57vh" viewBox="0 0 42 71" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="1.50024" y="0.5" width="39" height="39" rx="9.5" fill="#565656" />
                                <rect x="1.50024" y="0.5" width="39" height="39" rx="9.5" stroke="#565656" />
                                <g clipPath="url(#clip0_299_237)">
                                    <path d="M26.3689 20C26.3696 19.6706 26.3382 19.342 26.2752 19.0188L27.5814 18.2687L25.7877 15.1438L24.4877 15.8937C23.9852 15.4679 23.409 15.1375 22.7877 14.9187V13.4375H19.2127V14.9438C18.5914 15.1625 18.0152 15.4929 17.5127 15.9187L16.2127 15.1687L14.4189 18.2938L15.7252 19.0438C15.6002 19.6919 15.6002 20.3581 15.7252 21.0062L14.4189 21.7563L16.2127 24.8812L17.5127 24.1313C18.0152 24.5571 18.5914 24.8875 19.2127 25.1063V26.5625H22.7877V25.0563C23.409 24.8375 23.9852 24.5071 24.4877 24.0813L25.7877 24.8312L27.5814 21.7062L26.2752 20.9562C26.3366 20.6412 26.368 20.321 26.3689 20Z" stroke="white" strokeWidth="1.5" strokeMiterlimit="10" />
                                    <path d="M21.0003 22.3875C22.3189 22.3875 23.3878 21.3186 23.3878 20C23.3878 18.6815 22.3189 17.6125 21.0003 17.6125C19.6817 17.6125 18.6128 18.6815 18.6128 20C18.6128 21.3186 19.6817 22.3875 21.0003 22.3875Z" stroke="white" strokeWidth="1.5" strokeMiterlimit="10" />
                                </g>
                                <path d="M0.674072 59.6738H1.73462C1.83423 60.5879 2.70142 61.1914 3.90845 61.1914C5.05103 61.1914 5.88306 60.5879 5.88306 59.7559C5.88306 59.041 5.38501 58.6016 4.24829 58.3086L3.16431 58.0273C1.60571 57.6289 0.914307 56.9434 0.914307 55.7949C0.914307 54.3887 2.14478 53.4043 3.90259 53.4043C5.58423 53.4043 6.80298 54.4004 6.84985 55.8184H5.79517C5.70142 54.9102 4.96899 54.3535 3.86743 54.3535C2.77173 54.3535 2.01001 54.9219 2.01001 55.748C2.01001 56.3867 2.47876 56.7676 3.6272 57.0664L4.51196 57.3008C6.26392 57.7402 6.9729 58.4141 6.9729 59.627C6.9729 61.1738 5.75415 62.1406 3.80884 62.1406C2.01587 62.1406 0.773682 61.168 0.674072 59.6738ZM10.4885 56.6855C9.53345 56.6855 8.86548 57.418 8.80103 58.4316H12.1116C12.0881 57.4121 11.4495 56.6855 10.4885 56.6855ZM12.0881 60.2539H13.0901C12.9143 61.3203 11.8831 62.1055 10.553 62.1055C8.80688 62.1055 7.74634 60.8926 7.74634 58.9766C7.74634 57.084 8.82446 55.8008 10.5061 55.8008C12.1526 55.8008 13.1663 56.9961 13.1663 58.8418V59.2285H8.79517V59.2871C8.79517 60.4531 9.48071 61.2207 10.5764 61.2207C11.3499 61.2207 11.9182 60.8281 12.0881 60.2539ZM14.5256 54.4355H15.5452V55.9062H16.7288V56.7441H15.5452V60.3652C15.5452 60.9219 15.7795 61.1738 16.301 61.1738C16.4182 61.1738 16.6526 61.1562 16.7229 61.1445V62C16.5999 62.0293 16.3186 62.0469 16.0784 62.0469C14.9592 62.0469 14.5256 61.5898 14.5256 60.418V56.7441H13.6174V55.9062H14.5256V54.4355ZM18.1467 54.4355H19.1663V55.9062H20.3499V56.7441H19.1663V60.3652C19.1663 60.9219 19.4006 61.1738 19.9221 61.1738C20.0393 61.1738 20.2737 61.1562 20.344 61.1445V62C20.2209 62.0293 19.9397 62.0469 19.6995 62.0469C18.5803 62.0469 18.1467 61.5898 18.1467 60.418V56.7441H17.2385V55.9062H18.1467V54.4355ZM21.4924 62V55.9062H22.512V62H21.4924ZM22.0022 54.8809C21.6565 54.8809 21.3694 54.5938 21.3694 54.248C21.3694 53.8965 21.6565 53.6152 22.0022 53.6152C22.3538 53.6152 22.6409 53.8965 22.6409 54.248C22.6409 54.5938 22.3538 54.8809 22.0022 54.8809ZM23.8889 62V55.9062H24.8499V56.8789H24.8733C25.2131 56.2227 25.8635 55.8008 26.8069 55.8008C28.1428 55.8008 28.9163 56.6621 28.9163 58.0449V62H27.8967V58.2266C27.8967 57.2422 27.4338 56.7031 26.4963 56.7031C25.5354 56.7031 24.9084 57.3828 24.9084 58.4141V62H23.8889ZM32.6956 61.1504C33.7561 61.1504 34.4651 60.2715 34.4651 58.9297C34.4651 57.5879 33.7561 56.6973 32.6956 56.6973C31.6467 56.6973 30.9612 57.5645 30.9612 58.9297C30.9612 60.2949 31.6467 61.1504 32.6956 61.1504ZM32.7307 64.2969C31.3889 64.2969 30.3284 63.541 30.1584 62.5039H31.2073C31.4065 63.0605 32.01 63.4297 32.7717 63.4297C33.8264 63.4297 34.4651 62.8203 34.4651 61.9121V60.9512H34.4417C34.0667 61.6133 33.3459 62.0469 32.4905 62.0469C30.9377 62.0469 29.9182 60.8223 29.9182 58.9297C29.9182 57.0195 30.9377 55.8008 32.5139 55.8008C33.3752 55.8008 34.0901 56.2227 34.4944 56.9316H34.512V55.9062H35.4846V61.877C35.4846 63.3301 34.4124 64.2969 32.7307 64.2969ZM36.7092 57.5879C36.7092 56.5449 37.6409 55.8008 38.9827 55.8008C40.2424 55.8008 41.1682 56.5508 41.2151 57.582H40.2424C40.1721 56.9961 39.6975 56.6328 38.9475 56.6328C38.2034 56.6328 37.7112 57.002 37.7112 57.5352C37.7112 57.957 38.0334 58.2383 38.7249 58.4141L39.6682 58.6426C40.8987 58.9531 41.344 59.3984 41.344 60.2949C41.344 61.3555 40.342 62.1055 38.9182 62.1055C37.5823 62.1055 36.6506 61.3789 36.5452 60.3008H37.5647C37.676 60.9336 38.1565 61.2734 38.9827 61.2734C39.8088 61.2734 40.3186 60.9219 40.3186 60.3711C40.3186 59.9375 40.0667 59.7031 39.3811 59.5215L38.3088 59.2461C37.2366 58.9707 36.7092 58.4199 36.7092 57.5879Z" fill="#565656" />
                                <defs>
                                    <clipPath id="clip0_299_237">
                                        <rect width="15" height="15" fill="white" transform="translate(13.5002 12.5)" />
                                    </clipPath>
                                </defs>
                            </svg>
                        </div>
                        <svg width="26.94vh" style={{ marginTop: '0.71vh' }} height="4.44vh" viewBox="0 0 271 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1.13803 21V7.90909H6.3028C7.29144 7.90909 8.13519 8.08594 8.83405 8.43963C9.53718 8.78906 10.072 9.28551 10.4385 9.92898C10.8092 10.5682 10.9946 11.3203 10.9946 12.1854C10.9946 13.0547 10.8071 13.8026 10.4321 14.429C10.0571 15.0511 9.51374 15.5284 8.80209 15.8608C8.0947 16.1932 7.23817 16.3594 6.23249 16.3594H2.77439V14.1349H5.78505C6.31345 14.1349 6.75237 14.0625 7.10181 13.9176C7.45124 13.7727 7.71118 13.5554 7.88164 13.2656C8.05635 12.9759 8.14371 12.6158 8.14371 12.1854C8.14371 11.7507 8.05635 11.3842 7.88164 11.0859C7.71118 10.7876 7.44911 10.5618 7.09541 10.4084C6.74598 10.2507 6.30493 10.1719 5.77226 10.1719H3.90578V21H1.13803ZM8.20763 15.0426L11.4612 21H8.40578L5.22255 15.0426H8.20763ZM16.8556 21.1918C15.8457 21.1918 14.9764 20.9872 14.2477 20.5781C13.5232 20.1648 12.965 19.581 12.573 18.8267C12.1809 18.0682 11.9849 17.1712 11.9849 16.1357C11.9849 15.1257 12.1809 14.2393 12.573 13.4766C12.965 12.7138 13.5168 12.1193 14.2285 11.6932C14.9444 11.267 15.7839 11.054 16.747 11.054C17.3947 11.054 17.9977 11.1584 18.5559 11.3672C19.1184 11.5717 19.6085 11.8807 20.0261 12.294C20.448 12.7074 20.7761 13.2273 21.0105 13.8537C21.2448 14.4759 21.362 15.2045 21.362 16.0398V16.7876H13.0715V15.1001H18.7988C18.7988 14.7081 18.7136 14.3608 18.5431 14.0582C18.3727 13.7557 18.1362 13.5192 17.8336 13.3487C17.5353 13.174 17.188 13.0866 16.7917 13.0866C16.3783 13.0866 16.0119 13.1825 15.6923 13.3743C15.3769 13.5618 15.1298 13.8153 14.9508 14.1349C14.7718 14.4503 14.6802 14.8018 14.6759 15.1896V16.794C14.6759 17.2798 14.7654 17.6996 14.9444 18.0533C15.1276 18.407 15.3855 18.6797 15.7178 18.8714C16.0502 19.0632 16.4444 19.1591 16.9004 19.1591C17.2029 19.1591 17.4799 19.1165 17.7313 19.0312C17.9828 18.946 18.198 18.8182 18.3769 18.6477C18.5559 18.4773 18.6923 18.2685 18.786 18.0213L21.3045 18.1875C21.1766 18.7926 20.9146 19.321 20.5183 19.7727C20.1262 20.2202 19.6191 20.5696 18.997 20.821C18.3791 21.0682 17.6653 21.1918 16.8556 21.1918ZM27.2151 21.1918C26.2094 21.1918 25.3443 20.9787 24.6199 20.5526C23.8997 20.1222 23.3458 19.5256 22.958 18.7628C22.5745 18 22.3827 17.1222 22.3827 16.1293C22.3827 15.1236 22.5766 14.2415 22.9644 13.483C23.3564 12.7202 23.9125 12.1257 24.6327 11.6996C25.3529 11.2692 26.2094 11.054 27.2023 11.054C28.0588 11.054 28.8088 11.2095 29.4523 11.5206C30.0958 11.8317 30.605 12.2685 30.98 12.831C31.355 13.3935 31.5617 14.054 31.6 14.8125H29.0304C28.958 14.3224 28.7662 13.9283 28.4551 13.63C28.1483 13.3274 27.7456 13.1761 27.247 13.1761C26.8252 13.1761 26.4566 13.2912 26.1412 13.5213C25.8301 13.7472 25.5872 14.0774 25.4125 14.5121C25.2378 14.9467 25.1505 15.473 25.1505 16.0909C25.1505 16.7173 25.2357 17.25 25.4061 17.6889C25.5808 18.1278 25.8259 18.4624 26.1412 18.6925C26.4566 18.9226 26.8252 19.0376 27.247 19.0376C27.5581 19.0376 27.8372 18.9737 28.0844 18.8459C28.3358 18.718 28.5425 18.5327 28.7044 18.2898C28.8706 18.0426 28.9793 17.7464 29.0304 17.4013H31.6C31.5574 18.1513 31.3529 18.8118 30.9864 19.3828C30.6242 19.9496 30.1235 20.3928 29.4843 20.7124C28.8451 21.032 28.0887 21.1918 27.2151 21.1918ZM37.4579 21.1918C36.4479 21.1918 35.5786 20.9872 34.8499 20.5781C34.1255 20.1648 33.5673 19.581 33.1752 18.8267C32.7832 18.0682 32.5871 17.1712 32.5871 16.1357C32.5871 15.1257 32.7832 14.2393 33.1752 13.4766C33.5673 12.7138 34.1191 12.1193 34.8308 11.6932C35.5467 11.267 36.3862 11.054 37.3492 11.054C37.9969 11.054 38.5999 11.1584 39.1582 11.3672C39.7207 11.5717 40.2107 11.8807 40.6283 12.294C41.0502 12.7074 41.3783 13.2273 41.6127 13.8537C41.8471 14.4759 41.9643 15.2045 41.9643 16.0398V16.7876H33.6738V15.1001H39.4011C39.4011 14.7081 39.3158 14.3608 39.1454 14.0582C38.9749 13.7557 38.7384 13.5192 38.4359 13.3487C38.1376 13.174 37.7903 13.0866 37.394 13.0866C36.9806 13.0866 36.6141 13.1825 36.2945 13.3743C35.9792 13.5618 35.732 13.8153 35.5531 14.1349C35.3741 14.4503 35.2825 14.8018 35.2782 15.1896V16.794C35.2782 17.2798 35.3677 17.6996 35.5467 18.0533C35.7299 18.407 35.9877 18.6797 36.3201 18.8714C36.6525 19.0632 37.0467 19.1591 37.5026 19.1591C37.8052 19.1591 38.0822 19.1165 38.3336 19.0312C38.585 18.946 38.8002 18.8182 38.9792 18.6477C39.1582 18.4773 39.2945 18.2685 39.3883 18.0213L41.9068 18.1875C41.7789 18.7926 41.5168 19.321 41.1205 19.7727C40.7285 20.2202 40.2214 20.5696 39.5992 20.821C38.9813 21.0682 38.2675 21.1918 37.4579 21.1918ZM46.1043 15.3239V21H43.3813V11.1818H45.9764V12.9141H46.0915C46.3088 12.343 46.6732 11.8913 47.1845 11.5589C47.6959 11.2223 48.3159 11.054 49.0446 11.054C49.7264 11.054 50.3209 11.2031 50.828 11.5014C51.3351 11.7997 51.7293 12.2259 52.0105 12.7798C52.2918 13.3295 52.4324 13.9858 52.4324 14.7486V21H49.7094V15.2344C49.7137 14.6335 49.5602 14.1648 49.2492 13.8281C48.9381 13.4872 48.5098 13.3168 47.9644 13.3168C47.5979 13.3168 47.274 13.3956 46.9928 13.5533C46.7158 13.7109 46.4985 13.9411 46.3408 14.2436C46.1874 14.5419 46.1085 14.902 46.1043 15.3239ZM59.4408 11.1818V13.2273H53.5282V11.1818H59.4408ZM54.8705 8.82955H57.5935V17.983C57.5935 18.2344 57.6319 18.4304 57.7086 18.571C57.7853 18.7074 57.8918 18.8033 58.0282 18.8587C58.1688 18.9141 58.3307 18.9418 58.514 18.9418C58.6418 18.9418 58.7697 18.9311 58.8975 18.9098C59.0254 18.8842 59.1234 18.8651 59.1915 18.8523L59.6198 20.8786C59.4834 20.9212 59.2917 20.9702 59.0445 21.0256C58.7974 21.0852 58.4969 21.1214 58.1432 21.1342C57.487 21.1598 56.9117 21.0724 56.4174 20.8722C55.9273 20.6719 55.5459 20.3608 55.2732 19.9389C55.0005 19.517 54.8663 18.9844 54.8705 18.3409V8.82955ZM64.2132 10.1911V7.90909H74.9646V10.1911H70.9568V21H68.221V10.1911H64.2132ZM75.3046 21V11.1818H77.9445V12.8949H78.0467C78.2257 12.2855 78.5261 11.8253 78.948 11.5142C79.3699 11.1989 79.8557 11.0412 80.4054 11.0412C80.5418 11.0412 80.6888 11.0497 80.8465 11.0668C81.0041 11.0838 81.1426 11.1072 81.2619 11.1371V13.5533C81.1341 13.5149 80.9573 13.4808 80.7314 13.451C80.5055 13.4212 80.2989 13.4062 80.1114 13.4062C79.7108 13.4062 79.3528 13.4936 79.0375 13.6683C78.7264 13.8388 78.4793 14.0774 78.296 14.3842C78.1171 14.6911 78.0276 15.0447 78.0276 15.4453V21H75.3046ZM84.8283 21.1854C84.2018 21.1854 83.6436 21.0767 83.1535 20.8594C82.6635 20.6378 82.2757 20.3118 81.9902 19.8814C81.7089 19.4467 81.5683 18.9055 81.5683 18.2578C81.5683 17.7124 81.6684 17.2543 81.8687 16.8835C82.069 16.5128 82.3417 16.2145 82.6869 15.9886C83.0321 15.7628 83.4241 15.5923 83.8631 15.4773C84.3062 15.3622 84.7707 15.2812 85.2565 15.2344C85.8275 15.1747 86.2878 15.1193 86.6372 15.0682C86.9866 15.0128 87.2402 14.9318 87.3979 14.8253C87.5555 14.7187 87.6344 14.5611 87.6344 14.3523V14.3139C87.6344 13.9091 87.5065 13.5959 87.2508 13.3743C86.9994 13.1527 86.6415 13.0419 86.177 13.0419C85.6869 13.0419 85.297 13.1506 85.0072 13.3679C84.7175 13.581 84.5257 13.8494 84.4319 14.1733L81.9135 13.9688C82.0413 13.3722 82.2927 12.8565 82.6677 12.4219C83.0427 11.983 83.5264 11.6463 84.1187 11.4119C84.7153 11.1733 85.4057 11.054 86.1898 11.054C86.7352 11.054 87.2572 11.1179 87.7558 11.2457C88.2586 11.3736 88.704 11.5717 89.0917 11.8402C89.4838 12.1087 89.7927 12.4538 90.0186 12.8757C90.2444 13.2933 90.3574 13.794 90.3574 14.3778V21H87.775V19.6385H87.6983C87.5406 19.9453 87.3297 20.2159 87.0655 20.4503C86.8013 20.6804 86.4838 20.8615 86.1131 20.9936C85.7423 21.1214 85.314 21.1854 84.8283 21.1854ZM85.6081 19.3061C86.0086 19.3061 86.3623 19.2273 86.6692 19.0696C86.976 18.9077 87.2167 18.6903 87.3915 18.4176C87.5662 18.1449 87.6535 17.8359 87.6535 17.4908V16.4489C87.5683 16.5043 87.4511 16.5554 87.302 16.6023C87.1571 16.6449 86.993 16.6854 86.8098 16.7237C86.6265 16.7578 86.4433 16.7898 86.2601 16.8196C86.0768 16.8452 85.9106 16.8686 85.7615 16.8899C85.4419 16.9368 85.1628 17.0114 84.9241 17.1136C84.6855 17.2159 84.5001 17.3544 84.368 17.5291C84.2359 17.6996 84.1699 17.9126 84.1699 18.1683C84.1699 18.5391 84.3041 18.8224 84.5726 19.0185C84.8453 19.2102 85.1905 19.3061 85.6081 19.3061ZM94.833 15.3239V21H92.1099V11.1818H94.7051V12.9141H94.8202C95.0375 12.343 95.4018 11.8913 95.9132 11.5589C96.4246 11.2223 97.0446 11.054 97.7733 11.054C98.4551 11.054 99.0496 11.2031 99.5567 11.5014C100.064 11.7997 100.458 12.2259 100.739 12.7798C101.02 13.3295 101.161 13.9858 101.161 14.7486V21H98.4381V15.2344C98.4423 14.6335 98.2889 14.1648 97.9778 13.8281C97.6668 13.4872 97.2385 13.3168 96.693 13.3168C96.3266 13.3168 96.0027 13.3956 95.7214 13.5533C95.4445 13.7109 95.2271 13.9411 95.0695 14.2436C94.916 14.5419 94.8372 14.902 94.833 15.3239ZM111.116 13.9815L108.623 14.1349C108.581 13.9219 108.489 13.7301 108.348 13.5597C108.208 13.3849 108.022 13.2464 107.792 13.1442C107.567 13.0376 107.296 12.9844 106.981 12.9844C106.559 12.9844 106.203 13.0739 105.913 13.2528C105.623 13.4276 105.478 13.6619 105.478 13.956C105.478 14.1903 105.572 14.3885 105.76 14.5504C105.947 14.7124 106.269 14.8423 106.725 14.9403L108.502 15.2983C109.456 15.4943 110.168 15.8097 110.637 16.2443C111.106 16.679 111.34 17.25 111.34 17.9574C111.34 18.6009 111.15 19.1655 110.771 19.6513C110.396 20.1371 109.88 20.5163 109.224 20.7891C108.572 21.0575 107.82 21.1918 106.968 21.1918C105.668 21.1918 104.633 20.9212 103.861 20.38C103.094 19.8345 102.645 19.093 102.513 18.1555L105.191 18.0149C105.272 18.4112 105.468 18.7138 105.779 18.9226C106.09 19.1271 106.488 19.2294 106.974 19.2294C107.451 19.2294 107.835 19.1378 108.125 18.9545C108.419 18.767 108.568 18.5263 108.572 18.2322C108.568 17.9851 108.464 17.7827 108.259 17.625C108.054 17.4631 107.739 17.3395 107.313 17.2543L105.613 16.9155C104.654 16.7237 103.94 16.3913 103.471 15.9183C103.007 15.4453 102.775 14.8423 102.775 14.1094C102.775 13.4787 102.945 12.9354 103.286 12.4794C103.631 12.0234 104.115 11.6719 104.737 11.4247C105.363 11.1776 106.096 11.054 106.936 11.054C108.176 11.054 109.152 11.3161 109.863 11.8402C110.579 12.3643 110.997 13.0781 111.116 13.9815ZM115.494 21.1854C114.868 21.1854 114.31 21.0767 113.82 20.8594C113.33 20.6378 112.942 20.3118 112.656 19.8814C112.375 19.4467 112.234 18.9055 112.234 18.2578C112.234 17.7124 112.335 17.2543 112.535 16.8835C112.735 16.5128 113.008 16.2145 113.353 15.9886C113.698 15.7628 114.09 15.5923 114.529 15.4773C114.972 15.3622 115.437 15.2812 115.923 15.2344C116.494 15.1747 116.954 15.1193 117.303 15.0682C117.653 15.0128 117.906 14.9318 118.064 14.8253C118.222 14.7187 118.3 14.5611 118.3 14.3523V14.3139C118.3 13.9091 118.173 13.5959 117.917 13.3743C117.666 13.1527 117.308 13.0419 116.843 13.0419C116.353 13.0419 115.963 13.1506 115.673 13.3679C115.384 13.581 115.192 13.8494 115.098 14.1733L112.58 13.9688C112.707 13.3722 112.959 12.8565 113.334 12.4219C113.709 11.983 114.192 11.6463 114.785 11.4119C115.381 11.1733 116.072 11.054 116.856 11.054C117.401 11.054 117.923 11.1179 118.422 11.2457C118.925 11.3736 119.37 11.5717 119.758 11.8402C120.15 12.1087 120.459 12.4538 120.685 12.8757C120.911 13.2933 121.023 13.794 121.023 14.3778V21H118.441V19.6385H118.364C118.207 19.9453 117.996 20.2159 117.732 20.4503C117.467 20.6804 117.15 20.8615 116.779 20.9936C116.408 21.1214 115.98 21.1854 115.494 21.1854ZM116.274 19.3061C116.675 19.3061 117.028 19.2273 117.335 19.0696C117.642 18.9077 117.883 18.6903 118.058 18.4176C118.232 18.1449 118.32 17.8359 118.32 17.4908V16.4489C118.234 16.5043 118.117 16.5554 117.968 16.6023C117.823 16.6449 117.659 16.6854 117.476 16.7237C117.293 16.7578 117.109 16.7898 116.926 16.8196C116.743 16.8452 116.577 16.8686 116.428 16.8899C116.108 16.9368 115.829 17.0114 115.59 17.1136C115.352 17.2159 115.166 17.3544 115.034 17.5291C114.902 17.6996 114.836 17.9126 114.836 18.1683C114.836 18.5391 114.97 18.8224 115.239 19.0185C115.511 19.2102 115.857 19.3061 116.274 19.3061ZM127.212 21.1918C126.206 21.1918 125.341 20.9787 124.617 20.5526C123.897 20.1222 123.343 19.5256 122.955 18.7628C122.571 18 122.38 17.1222 122.38 16.1293C122.38 15.1236 122.574 14.2415 122.961 13.483C123.353 12.7202 123.91 12.1257 124.63 11.6996C125.35 11.2692 126.206 11.054 127.199 11.054C128.056 11.054 128.806 11.2095 129.449 11.5206C130.093 11.8317 130.602 12.2685 130.977 12.831C131.352 13.3935 131.559 14.054 131.597 14.8125H129.027C128.955 14.3224 128.763 13.9283 128.452 13.63C128.145 13.3274 127.743 13.1761 127.244 13.1761C126.822 13.1761 126.454 13.2912 126.138 13.5213C125.827 13.7472 125.584 14.0774 125.41 14.5121C125.235 14.9467 125.147 15.473 125.147 16.0909C125.147 16.7173 125.233 17.25 125.403 17.6889C125.578 18.1278 125.823 18.4624 126.138 18.6925C126.454 18.9226 126.822 19.0376 127.244 19.0376C127.555 19.0376 127.834 18.9737 128.081 18.8459C128.333 18.718 128.54 18.5327 128.701 18.2898C128.868 18.0426 128.976 17.7464 129.027 17.4013H131.597C131.554 18.1513 131.35 18.8118 130.983 19.3828C130.621 19.9496 130.12 20.3928 129.481 20.7124C128.842 21.032 128.086 21.1918 127.212 21.1918ZM138.203 11.1818V13.2273H132.29V11.1818H138.203ZM133.632 8.82955H136.355V17.983C136.355 18.2344 136.394 18.4304 136.471 18.571C136.547 18.7074 136.654 18.8033 136.79 18.8587C136.931 18.9141 137.093 18.9418 137.276 18.9418C137.404 18.9418 137.532 18.9311 137.659 18.9098C137.787 18.8842 137.885 18.8651 137.954 18.8523L138.382 20.8786C138.245 20.9212 138.054 20.9702 137.806 21.0256C137.559 21.0852 137.259 21.1214 136.905 21.1342C136.249 21.1598 135.674 21.0724 135.179 20.8722C134.689 20.6719 134.308 20.3608 134.035 19.9389C133.762 19.517 133.628 18.9844 133.632 18.3409V8.82955ZM139.617 21V11.1818H142.34V21H139.617ZM140.984 9.91619C140.58 9.91619 140.232 9.78196 139.943 9.51349C139.657 9.24077 139.514 8.91477 139.514 8.53551C139.514 8.16051 139.657 7.83878 139.943 7.57031C140.232 7.29758 140.58 7.16122 140.984 7.16122C141.389 7.16122 141.734 7.29758 142.02 7.57031C142.31 7.83878 142.455 8.16051 142.455 8.53551C142.455 8.91477 142.31 9.24077 142.02 9.51349C141.734 9.78196 141.389 9.91619 140.984 9.91619ZM148.597 21.1918C147.604 21.1918 146.745 20.9808 146.021 20.5589C145.301 20.1328 144.745 19.5405 144.353 18.782C143.961 18.0192 143.765 17.1349 143.765 16.1293C143.765 15.1151 143.961 14.2287 144.353 13.4702C144.745 12.7074 145.301 12.1151 146.021 11.6932C146.745 11.267 147.604 11.054 148.597 11.054C149.59 11.054 150.446 11.267 151.167 11.6932C151.891 12.1151 152.449 12.7074 152.841 13.4702C153.233 14.2287 153.429 15.1151 153.429 16.1293C153.429 17.1349 153.233 18.0192 152.841 18.782C152.449 19.5405 151.891 20.1328 151.167 20.5589C150.446 20.9808 149.59 21.1918 148.597 21.1918ZM148.61 19.0824C149.061 19.0824 149.439 18.9545 149.741 18.6989C150.044 18.4389 150.272 18.0852 150.425 17.6378C150.583 17.1903 150.662 16.6811 150.662 16.1101C150.662 15.5391 150.583 15.0298 150.425 14.5824C150.272 14.1349 150.044 13.7812 149.741 13.5213C149.439 13.2614 149.061 13.1314 148.61 13.1314C148.154 13.1314 147.77 13.2614 147.459 13.5213C147.152 13.7812 146.92 14.1349 146.762 14.5824C146.609 15.0298 146.532 15.5391 146.532 16.1101C146.532 16.6811 146.609 17.1903 146.762 17.6378C146.92 18.0852 147.152 18.4389 147.459 18.6989C147.77 18.9545 148.154 19.0824 148.61 19.0824ZM157.563 15.3239V21H154.84V11.1818H157.435V12.9141H157.55C157.768 12.343 158.132 11.8913 158.643 11.5589C159.155 11.2223 159.775 11.054 160.503 11.054C161.185 11.054 161.78 11.2031 162.287 11.5014C162.794 11.7997 163.188 12.2259 163.469 12.7798C163.75 13.3295 163.891 13.9858 163.891 14.7486V21H161.168V15.2344C161.172 14.6335 161.019 14.1648 160.708 13.8281C160.397 13.4872 159.968 13.3168 159.423 13.3168C159.057 13.3168 158.733 13.3956 158.451 13.5533C158.174 13.7109 157.957 13.9411 157.799 14.2436C157.646 14.5419 157.567 14.902 157.563 15.3239ZM173.846 13.9815L171.353 14.1349C171.311 13.9219 171.219 13.7301 171.078 13.5597C170.938 13.3849 170.752 13.2464 170.522 13.1442C170.297 13.0376 170.026 12.9844 169.711 12.9844C169.289 12.9844 168.933 13.0739 168.643 13.2528C168.353 13.4276 168.208 13.6619 168.208 13.956C168.208 14.1903 168.302 14.3885 168.49 14.5504C168.677 14.7124 168.999 14.8423 169.455 14.9403L171.232 15.2983C172.186 15.4943 172.898 15.8097 173.367 16.2443C173.836 16.679 174.07 17.25 174.07 17.9574C174.07 18.6009 173.88 19.1655 173.501 19.6513C173.126 20.1371 172.61 20.5163 171.954 20.7891C171.302 21.0575 170.55 21.1918 169.698 21.1918C168.398 21.1918 167.363 20.9212 166.591 20.38C165.824 19.8345 165.375 19.093 165.243 18.1555L167.921 18.0149C168.002 18.4112 168.198 18.7138 168.509 18.9226C168.82 19.1271 169.218 19.2294 169.704 19.2294C170.181 19.2294 170.565 19.1378 170.855 18.9545C171.149 18.767 171.298 18.5263 171.302 18.2322C171.298 17.9851 171.194 17.7827 170.989 17.625C170.784 17.4631 170.469 17.3395 170.043 17.2543L168.343 16.9155C167.384 16.7237 166.67 16.3913 166.201 15.9183C165.737 15.4453 165.505 14.8423 165.505 14.1094C165.505 13.4787 165.675 12.9354 166.016 12.4794C166.361 12.0234 166.845 11.6719 167.467 11.4247C168.093 11.1776 168.826 11.054 169.666 11.054C170.906 11.054 171.882 11.3161 172.593 11.8402C173.309 12.3643 173.727 13.0781 173.846 13.9815Z" fill="white" />
                            <path d="M241.578 12.8189C241.549 12.5324 241.427 12.3099 241.212 12.1513C240.996 11.9927 240.704 11.9134 240.335 11.9134C240.084 11.9134 239.872 11.9489 239.699 12.0199C239.526 12.0885 239.394 12.1844 239.301 12.3075C239.211 12.4306 239.166 12.5703 239.166 12.7266C239.162 12.8568 239.189 12.9704 239.248 13.0675C239.31 13.1645 239.394 13.2486 239.5 13.3196C239.607 13.3883 239.73 13.4486 239.87 13.5007C240.009 13.5504 240.158 13.593 240.317 13.6286L240.97 13.7848C241.288 13.8558 241.579 13.9505 241.844 14.0689C242.109 14.1873 242.339 14.3329 242.533 14.5057C242.727 14.6785 242.877 14.8821 242.984 15.1165C243.093 15.3509 243.148 15.6196 243.151 15.9226C243.148 16.3677 243.035 16.7536 242.81 17.0803C242.587 17.4046 242.265 17.6567 241.844 17.8366C241.425 18.0142 240.92 18.103 240.328 18.103C239.741 18.103 239.229 18.013 238.794 17.8331C238.36 17.6532 238.022 17.3868 237.778 17.0341C237.536 16.679 237.41 16.2398 237.398 15.7166H238.886C238.902 15.9605 238.972 16.1641 239.095 16.3274C239.221 16.4884 239.388 16.6103 239.596 16.6932C239.807 16.7737 240.045 16.8139 240.31 16.8139C240.57 16.8139 240.796 16.776 240.988 16.7003C241.182 16.6245 241.333 16.5192 241.439 16.3842C241.546 16.2493 241.599 16.0942 241.599 15.919C241.599 15.7557 241.55 15.6184 241.453 15.5071C241.359 15.3958 241.219 15.3011 241.034 15.223C240.852 15.1449 240.628 15.0739 240.363 15.0099L239.571 14.8111C238.958 14.6619 238.474 14.4287 238.119 14.1115C237.764 13.7943 237.587 13.367 237.59 12.8295C237.587 12.3892 237.705 12.0045 237.941 11.6754C238.18 11.3464 238.508 11.0895 238.925 10.9048C239.342 10.7202 239.815 10.6278 240.345 10.6278C240.885 10.6278 241.356 10.7202 241.759 10.9048C242.164 11.0895 242.478 11.3464 242.703 11.6754C242.928 12.0045 243.044 12.3857 243.051 12.8189H241.578ZM246.442 18.1065C245.881 18.1065 245.398 17.9929 244.994 17.7656C244.591 17.536 244.281 17.2116 244.063 16.7926C243.845 16.3712 243.737 15.8729 243.737 15.2976C243.737 14.7365 243.845 14.2441 244.063 13.8203C244.281 13.3965 244.588 13.0663 244.983 12.8295C245.381 12.5928 245.847 12.4744 246.382 12.4744C246.742 12.4744 247.077 12.5324 247.387 12.6484C247.7 12.7621 247.972 12.9337 248.204 13.1634C248.438 13.393 248.62 13.6818 248.751 14.0298C248.881 14.3755 248.946 14.7803 248.946 15.2443V15.6598H244.34V14.7223H247.522C247.522 14.5045 247.475 14.3116 247.38 14.1435C247.285 13.9754 247.154 13.844 246.986 13.7493C246.82 13.6522 246.627 13.6037 246.407 13.6037C246.177 13.6037 245.974 13.657 245.796 13.7635C245.621 13.8677 245.484 14.0085 245.384 14.1861C245.285 14.3613 245.234 14.5566 245.232 14.772V15.6634C245.232 15.9332 245.281 16.1664 245.381 16.3629C245.482 16.5594 245.626 16.7109 245.81 16.8175C245.995 16.924 246.214 16.9773 246.467 16.9773C246.635 16.9773 246.789 16.9536 246.929 16.9062C247.069 16.8589 247.188 16.7879 247.288 16.6932C247.387 16.5985 247.463 16.4825 247.515 16.3452L248.914 16.4375C248.843 16.7737 248.697 17.0672 248.477 17.3182C248.259 17.5668 247.978 17.7609 247.632 17.9006C247.289 18.0379 246.892 18.1065 246.442 18.1065ZM252.219 18.1065C251.658 18.1065 251.175 17.9929 250.77 17.7656C250.368 17.536 250.058 17.2116 249.84 16.7926C249.622 16.3712 249.513 15.8729 249.513 15.2976C249.513 14.7365 249.622 14.2441 249.84 13.8203C250.058 13.3965 250.364 13.0663 250.76 12.8295C251.157 12.5928 251.624 12.4744 252.159 12.4744C252.519 12.4744 252.853 12.5324 253.164 12.6484C253.476 12.7621 253.748 12.9337 253.98 13.1634C254.215 13.393 254.397 13.6818 254.527 14.0298C254.657 14.3755 254.723 14.7803 254.723 15.2443V15.6598H250.117V14.7223H253.299C253.299 14.5045 253.251 14.3116 253.157 14.1435C253.062 13.9754 252.93 13.844 252.762 13.7493C252.597 13.6522 252.404 13.6037 252.184 13.6037C251.954 13.6037 251.75 13.657 251.573 13.7635C251.398 13.8677 251.26 14.0085 251.161 14.1861C251.061 14.3613 251.01 14.5566 251.008 14.772V15.6634C251.008 15.9332 251.058 16.1664 251.157 16.3629C251.259 16.5594 251.402 16.7109 251.587 16.8175C251.772 16.924 251.991 16.9773 252.244 16.9773C252.412 16.9773 252.566 16.9536 252.706 16.9062C252.845 16.8589 252.965 16.7879 253.064 16.6932C253.164 16.5985 253.239 16.4825 253.291 16.3452L254.691 16.4375C254.62 16.7737 254.474 17.0672 254.254 17.3182C254.036 17.5668 253.754 17.7609 253.409 17.9006C253.065 18.0379 252.669 18.1065 252.219 18.1065ZM258.906 18H257.258L259.769 10.7273H261.751L264.258 18H262.61L260.788 12.3892H260.731L258.906 18ZM258.803 15.1413H262.695V16.3416H258.803V15.1413ZM266.418 10.7273V18H264.905V10.7273H266.418ZM268.942 10.7273V18H267.429V10.7273H268.942Z" fill="white" fillOpacity="0.42" />
                        </svg>
                        <div style={{
                            width: '92%',
                            height: '34%',
                            overflowX: 'hidden',
                            overflowY: 'auto',
                        }}>
                            {transcationData && transcationData.map((data, i) => {
                                return (
                                    <div style={{
                                        width: '100%',
                                        height: '5.33vh',
                                        borderRadius: '0.56vh',
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        display: 'flex',
                                        alignItems: 'center',
                                        marginTop: i === 0 ? '0.00vh' : '0.53vh',
                                    }} key={i}>
                                        <svg width="2.78vh" height="2.78vh" style={{ marginLeft: '1.24vh' }} viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <rect x="0.000244141" width="26" height="26" rx="3" fill="white" fillOpacity="0.34" />
                                            <path d="M5.50024 20.5H20.5002M6.33358 18H19.6669M8.00024 18V13.8334M11.3336 18V13.8334M14.6669 18V13.8334M18.0002 18V13.8334M13.0002 8.83909L13.0064 8.83348M20.5002 11.3334L14.7719 6.24151C14.145 5.68429 13.8316 5.4057 13.4779 5.29989C13.1662 5.20668 12.8342 5.20668 12.5226 5.29989C12.1689 5.4057 11.8555 5.68429 11.2286 6.24151L5.50024 11.3334H20.5002Z" stroke="white" strokeLinecap="round" strokeLinejoin="round" />
                                        </svg>
                                        <div style={{
                                            width: '40%',
                                            height: '70%',
                                            marginLeft: '0.89vh',
                                            display: 'flex',
                                            flexDirection: 'column',
                                            justifyContent: 'center',
                                        }}>
                                            <div style={{ fontSize: '1.42vh', fontWeight: 600, lineHeight: '1.42vh' }}>{data.type === 'debit' ? "Money Debit" : "Money Credit"}</div>
                                            <div style={{ fontSize: '1.24vh', fontWeight: 400, lineHeight: '1.42vh' }}>{dayjs(new Date(data.date)).format('MMM, YYYY')}</div>
                                        </div>
                                        <div style={{
                                            width: '38%',
                                            textAlign: 'right',
                                            fontSize: '1.33vh',
                                            fontWeight: 500,
                                            whiteSpace: 'nowrap',
                                            overflow: 'hidden',
                                            textOverflow: 'ellipsis',
                                        }}>
                                            <NumberFormatter value={data.amount} thousandSeparator prefix="$ " style={{
                                                color: data.type === 'credit' ? 'green' : 'rgba(255, 0, 0, 0.8)'
                                            }} />
                                        </div>
                                    </div>
                                )
                            })}
                        </div>
                    </div>}
                </Transition>
                <Transition
                    mounted={location.app === "wallet" && location.page.wallet === "transfer" && !showTransferPage}
                    transition="fade"
                    duration={400}
                    timingFunction="ease"
                    onEnter={async () => {
                        const res = await fetchNui('getContacts');
                        setContactsData(JSON.parse(res as string));
                        setShowStartupScreen(false);
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(0, 0, 0)',
                        zIndex: 1,
                    }}>
                        <div style={{
                            marginTop: '3.20vh',
                            width: '90%',
                            display: 'flex',
                            alignItems: 'center',
                        }}>
                            <svg width="4.26vh" height="1.67vh" onClick={() => {
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "home"
                                    }
                                });
                            }} style={{
                                cursor: 'pointer'
                            }} viewBox="0 0 46 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7 16.5L1.34983 9.43729C1.14531 9.18163 1.14531 8.81837 1.34983 8.56271L7 1.5" stroke="#0A84FF" strokeWidth="2" strokeLinecap="round" />
                                <path d="M18.5356 14H14.2949V3.43115H18.5137C20.3887 3.43115 21.6191 4.47119 21.6191 6.06787C21.6191 7.18848 20.7915 8.19189 19.7368 8.36768V8.42627C21.1724 8.5874 22.1392 9.60547 22.1392 11.0117C22.1392 12.8721 20.7842 14 18.5356 14ZM15.9355 4.77148V7.92822H17.7739C19.1948 7.92822 19.9785 7.34229 19.9785 6.29492C19.9785 5.31348 19.3047 4.77148 18.1182 4.77148H15.9355ZM15.9355 12.6597H18.1987C19.6782 12.6597 20.4619 12.0518 20.4619 10.9092C20.4619 9.7666 19.6562 9.18066 18.1035 9.18066H15.9355V12.6597ZM26.0576 12.8794C27.1636 12.8794 28.0278 12.1177 28.0278 11.1143V10.5063L26.1309 10.6235C25.186 10.6895 24.6514 11.1069 24.6514 11.7661C24.6514 12.4399 25.208 12.8794 26.0576 12.8794ZM25.6182 14.1318C24.1094 14.1318 23.0547 13.1943 23.0547 11.8101C23.0547 10.4624 24.0874 9.63477 25.9185 9.53223L28.0278 9.40771V8.81445C28.0278 7.95752 27.4492 7.44482 26.4824 7.44482C25.5669 7.44482 24.9956 7.88428 24.8564 8.57275H23.3623C23.4502 7.18115 24.6367 6.15576 26.541 6.15576C28.4087 6.15576 29.6025 7.14453 29.6025 8.68994V14H28.0864V12.7329H28.0498C27.603 13.5898 26.6289 14.1318 25.6182 14.1318ZM37.7544 8.94629H36.2456C36.0845 8.12598 35.4692 7.47412 34.4365 7.47412C33.2134 7.47412 32.4077 8.49219 32.4077 10.1475C32.4077 11.8394 33.2207 12.8208 34.4512 12.8208C35.4253 12.8208 36.0625 12.2861 36.2456 11.3926H37.769C37.6006 13.0332 36.2896 14.1465 34.4365 14.1465C32.2319 14.1465 30.7964 12.6377 30.7964 10.1475C30.7964 7.70117 32.2319 6.15576 34.4219 6.15576C36.4067 6.15576 37.6152 7.43018 37.7544 8.94629ZM40.5449 9.59814L43.6577 6.29492H45.5181L42.3247 9.61279L45.6426 14H43.8042L41.1895 10.5796L40.5303 11.2314V14H38.9482V3.43115H40.5303V9.59814H40.5449Z" fill="#0A84FF" />
                            </svg>
                            <div style={{ fontSize: '1.60vh', fontWeight: 500, marginLeft: '6.22vh' }}>Transfer</div>
                            <svg style={{
                                marginLeft: 'auto',
                            }} onClick={async () => {
                                if (!seachValue) return;
                                const res = await fetchNui('getDetailsXS', seachValue);
                                if (res) {
                                    setResAccountNumber(res as string);
                                    setSelectedContact({
                                        ...selectedContact,
                                        firstName: 'Unknown',
                                        lastName: 'User',
                                        image: '',
                                    })
                                    setShowTransferPage(true);
                                }
                            }} className='clickanimation' width="3.43vh" height="1.67vh" viewBox="0 0 37 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1.15283 3.43115H5.11523C7.16602 3.43115 8.59424 4.84473 8.59424 6.90283C8.59424 8.96826 7.13672 10.3892 5.06396 10.3892H2.79346V14H1.15283V3.43115ZM2.79346 4.81543V9.01221H4.67578C6.104 9.01221 6.91699 8.24316 6.91699 6.91016C6.91699 5.57715 6.104 4.81543 4.68311 4.81543H2.79346ZM11.9194 12.8794C13.0254 12.8794 13.8896 12.1177 13.8896 11.1143V10.5063L11.9927 10.6235C11.0479 10.6895 10.5132 11.1069 10.5132 11.7661C10.5132 12.4399 11.0698 12.8794 11.9194 12.8794ZM11.48 14.1318C9.97119 14.1318 8.9165 13.1943 8.9165 11.8101C8.9165 10.4624 9.94922 9.63477 11.7803 9.53223L13.8896 9.40771V8.81445C13.8896 7.95752 13.311 7.44482 12.3442 7.44482C11.4287 7.44482 10.8574 7.88428 10.7183 8.57275H9.22412C9.31201 7.18115 10.4985 6.15576 12.4028 6.15576C14.2705 6.15576 15.4644 7.14453 15.4644 8.68994V14H13.9482V12.7329H13.9116C13.4648 13.5898 12.4907 14.1318 11.48 14.1318ZM17.7642 16.8711C17.6396 16.8711 17.2368 16.8564 17.1196 16.8345V15.5527C17.2368 15.582 17.5005 15.582 17.6323 15.582C18.3721 15.582 18.7603 15.2744 19.002 14.4834C19.002 14.4688 19.1411 14.0146 19.1411 14.0073L16.3579 6.29492H18.0718L20.0273 12.5645H20.0493L22.0049 6.29492H23.6748L20.7817 14.4028C20.1226 16.2705 19.3682 16.8711 17.7642 16.8711Z" fill="#0A84FF" />
                                <path d="M30 16.5L35.6502 9.43729C35.8547 9.18163 35.8547 8.81837 35.6502 8.56271L30 1.5" stroke="#0A84FF" strokeWidth="2" strokeLinecap="round" />
                            </svg>

                        </div>
                        <Searchbar value={seachValue} onChange={(e) => setSearchValue(e)} mt="0.89vh" />
                        <div style={{
                            width: '90%',
                            height: '73%',
                            marginTop: '1.07vh',
                            overflowY: 'auto',
                            overflowX: 'hidden',
                        }}>
                            {contactsData && contactsData.filter(
                                (contact: any) => contact.firstName.toLowerCase().includes(seachValue.toLowerCase()) || contact.lastName.toLowerCase().includes(seachValue.toLowerCase())
                            ).map((contact, i: number) => {
                                return (
                                    <div key={i} style={{
                                        width: '100%',
                                        height: '4.44vh',
                                        borderRadius: '0.56vh',
                                        marginTop: i === 0 ? '' : '0.53vh',
                                        display: 'flex',
                                        cursor: 'pointer',
                                    }} onClick={async () => {
                                        const res = await fetchNui('getDetailsXS', contact.contactNumber);
                                        if (res) {
                                            setSelectedContact(contact);
                                            setShowTransferPage(true);
                                            setResAccountNumber(res as string);
                                        } else {
                                            fetchNui('showNoti', { app: 'settings', title: 'Error', description: 'The user you are tring to send money haven\'t signed up yet on wallet app.' })
                                        }
                                    }}>
                                        <Avatar src={contact.image.length > 0 ? contact.image : 'https://cdn.summitrp.gg/uploads/server/phone/emptyPfp.svg'} size="3.56vh" />
                                        <div style={{
                                            marginLeft: '0.89vh',
                                            fontSize: '1.60vh',
                                            fontWeight: 600,
                                            width: '90%',
                                            borderBottom: '0.18vh solid rgb(48, 48, 48)',
                                            marginTop: '0.53vh',
                                        }}>
                                            {contact.firstName} {contact.lastName}
                                        </div>
                                    </div>
                                )
                            })}
                        </div>
                    </div>}
                </Transition>
                <Transition
                    mounted={showTransferPage}
                    transition="fade"
                    duration={400}
                    timingFunction="ease"
                    onEnter={async () => {
                        const res = await fetchNui('getContacts');
                        setContactsData(JSON.parse(res as string));
                        setShowStartupScreen(false);
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(0, 0, 0)',
                        zIndex: 10,
                    }}>
                        <div style={{
                            marginTop: '3.20vh',
                            width: '90%',
                            display: 'flex',
                            alignItems: 'center',
                        }}>
                            <svg width="4.26vh" height="1.67vh" onClick={() => {
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "home"
                                    }
                                });
                                setShowTransferPage(false);
                            }} style={{
                                cursor: 'pointer'
                            }} viewBox="0 0 46 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7 16.5L1.34983 9.43729C1.14531 9.18163 1.14531 8.81837 1.34983 8.56271L7 1.5" stroke="#0A84FF" strokeWidth="2" strokeLinecap="round" />
                                <path d="M18.5356 14H14.2949V3.43115H18.5137C20.3887 3.43115 21.6191 4.47119 21.6191 6.06787C21.6191 7.18848 20.7915 8.19189 19.7368 8.36768V8.42627C21.1724 8.5874 22.1392 9.60547 22.1392 11.0117C22.1392 12.8721 20.7842 14 18.5356 14ZM15.9355 4.77148V7.92822H17.7739C19.1948 7.92822 19.9785 7.34229 19.9785 6.29492C19.9785 5.31348 19.3047 4.77148 18.1182 4.77148H15.9355ZM15.9355 12.6597H18.1987C19.6782 12.6597 20.4619 12.0518 20.4619 10.9092C20.4619 9.7666 19.6562 9.18066 18.1035 9.18066H15.9355V12.6597ZM26.0576 12.8794C27.1636 12.8794 28.0278 12.1177 28.0278 11.1143V10.5063L26.1309 10.6235C25.186 10.6895 24.6514 11.1069 24.6514 11.7661C24.6514 12.4399 25.208 12.8794 26.0576 12.8794ZM25.6182 14.1318C24.1094 14.1318 23.0547 13.1943 23.0547 11.8101C23.0547 10.4624 24.0874 9.63477 25.9185 9.53223L28.0278 9.40771V8.81445C28.0278 7.95752 27.4492 7.44482 26.4824 7.44482C25.5669 7.44482 24.9956 7.88428 24.8564 8.57275H23.3623C23.4502 7.18115 24.6367 6.15576 26.541 6.15576C28.4087 6.15576 29.6025 7.14453 29.6025 8.68994V14H28.0864V12.7329H28.0498C27.603 13.5898 26.6289 14.1318 25.6182 14.1318ZM37.7544 8.94629H36.2456C36.0845 8.12598 35.4692 7.47412 34.4365 7.47412C33.2134 7.47412 32.4077 8.49219 32.4077 10.1475C32.4077 11.8394 33.2207 12.8208 34.4512 12.8208C35.4253 12.8208 36.0625 12.2861 36.2456 11.3926H37.769C37.6006 13.0332 36.2896 14.1465 34.4365 14.1465C32.2319 14.1465 30.7964 12.6377 30.7964 10.1475C30.7964 7.70117 32.2319 6.15576 34.4219 6.15576C36.4067 6.15576 37.6152 7.43018 37.7544 8.94629ZM40.5449 9.59814L43.6577 6.29492H45.5181L42.3247 9.61279L45.6426 14H43.8042L41.1895 10.5796L40.5303 11.2314V14H38.9482V3.43115H40.5303V9.59814H40.5449Z" fill="#0A84FF" />
                            </svg>
                            <div style={{ fontSize: '1.60vh', fontWeight: 500, marginLeft: '6.22vh' }}>Transfer</div>
                        </div>
                        <Avatar src={selectedContact.image.length > 0 ? selectedContact.image : 'https://cdn.summitrp.gg/uploads/server/phone/emptyPfp.svg'} size="7.11vh" mt="2.67vh" />
                        <div style={{ fontSize: '2.13vh', marginTop: '0.36vh', fontWeight: 500, lineHeight: '3.02vh' }}>{selectedContact.firstName} {selectedContact.lastName}</div>
                        <div style={{ fontSize: '10px', color: 'rgba(255,255,255,0.7)', marginTop: '0.36vh', fontWeight: 500, lineHeight: '0.00vh' }}>A/C No - {resaccountNumber}</div>
                        <NumberInput styles={{
                            root: {
                                width: '90%',
                                height: '4.44vh',
                                marginTop: '1.42vh',
                                borderRadius: '0.00vh',
                                backgroundColor: 'rgba(48, 48, 48, 0)',
                                display: 'flex',
                                alignItems: 'center',
                                borderBottom: '1px solid rgba(255, 255, 255, 0.7)',
                            },
                            input: {
                                width: '26.67vh',
                                textAlign: 'center',
                                height: '100%',
                                fontSize: '1.60vh',
                                fontWeight: 500,
                                backgroundColor: 'transparent',
                                border: 'none',
                                color: 'white',
                                paddingLeft: '0.89vh',
                            }
                        }} value={amount} onChange={(e) => {
                            setAmount(Number(e));
                        }} placeholder="Amount" rightSection={<></>} />
                        <Button mt="1.78vh" style={{
                            width: '90%',
                            height: '3.91vh',
                            backgroundColor: 'rgb(60, 60, 60)',
                            color: 'rgb(255, 255, 255)',
                            fontSize: '1.60vh',
                            fontWeight: 500,
                        }} onClick={async () => {
                            const res = await fetchNui('transXAdqasddasdferMoney', JSON.stringify({
                                amount: amount,
                                to: resaccountNumber,
                            }));
                            if (res) {
                                setAmount(0);
                                setSelectedContact({
                                    _id: '',
                                    personalNumber: '',
                                    contactNumber: '',
                                    firstName: '',
                                    lastName: '',
                                    image: '',
                                    ownerId: '',
                                    notes: '',
                                    email: '',
                                    isFav: false,
                                });
                                setShowTransferPage(false);
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "home"
                                    }
                                });
                                setSearchValue('');
                            } else {
                                setAmount(0);
                                setSelectedContact({
                                    _id: '',
                                    personalNumber: '',
                                    contactNumber: '',
                                    firstName: '',
                                    lastName: '',
                                    image: '',
                                    ownerId: '',
                                    notes: '',
                                    email: '',
                                    isFav: false,
                                });
                                setShowTransferPage(false);
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "home"
                                    }
                                });
                                setSearchValue('');
                                fetchNui('showNoti', { app: 'settings', title: 'Error', description: 'Something went wrong while transferring money.' })
                            }
                        }}>Transfer</Button>
                        <div style={{
                            width: '90%',
                            display: 'flex',
                            marginTop: '0.89vh',
                            height: '3.56vh',
                            alignItems: 'center',
                        }}>
                            <svg width="3.24vh" height="1.48vh" viewBox="0 0 35 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20.3231 15.25H16.4977L18.8885 0.758934H22.7142L20.3231 15.25ZM13.2796 0.758934L9.63271 10.726L9.20116 8.57969L7.91439 2.06369C7.91439 2.06369 7.75875 0.758934 6.09978 0.758934H0.070745L0 1.0043C0 1.0043 1.84369 1.38263 4.00141 2.66063L7.32485 15.2504H11.3105L17.3966 0.758934H13.2796ZM33.5708 4.2437L34.1167 1.13183C34.1167 1.13183 32.4322 0.5 30.6762 0.5C28.7779 0.5 24.2698 1.31828 24.2698 5.29727C24.2698 9.04097 29.5608 9.08749 29.5608 11.0539C29.5608 13.0204 24.815 12.668 23.2487 11.428L22.68 14.6817C22.68 14.6817 24.3881 15.5 26.9978 15.5C29.6083 15.5 33.5465 14.1669 33.5465 10.5388C33.5465 6.77103 28.208 6.42023 28.208 4.78211C28.2084 3.14362 31.9339 3.3541 33.5708 4.2437Z" fill="#E2E2E2" />
                                <path d="M9.20156 8.5802L7.91439 2.06342C7.91439 2.06342 7.75875 0.758667 6.09979 0.758667H0.0707451L0 1.00403C0 1.00403 2.89779 1.59633 5.67728 3.81549C8.33493 5.93659 9.20156 8.5802 9.20156 8.5802Z" fill="#E6A540" />
                            </svg>
                            <div style={{
                                width: '85%',
                                height: '100%',
                                marginLeft: '0.89vh',
                                display: 'flex',
                                flexDirection: 'column',
                            }}>
                                <div style={{
                                    fontSize: '1.30vh',
                                    fontWeight: 500,
                                    letterSpacing: '0.12vh',
                                }}>**** {walletDetails.cardNumber.slice(12)}</div>
                                <div style={{
                                    color: '#91949F',
                                    fontSize: '1.11vh',
                                    lineHeight: '1.11vh',
                                }}>Balance: <NumberFormatter value={walletDetails.balance} thousandSeparator prefix="$ " /></div>
                            </div>
                        </div>
                        <Dialpad mt="10.17vh" onDial={(e) => {
                            if (e === 'back') {
                                setAmount(Number(String(amount).slice(0, -1)));
                            } else {
                                setAmount(Number(String(amount) + e));
                            }
                        }} />
                    </div>}
                </Transition>

                <Transition
                    mounted={location.app === "wallet" && location.page.wallet === "invoice"}
                    transition="fade"
                    duration={400}
                    timingFunction="ease"
                    onEnter={async () => {
                        const res = await fetchNui('getContacts');
                        setContactsData(JSON.parse(res as string));
                        const newRes = await fetchNui('getInvoices', historyType);
                        setInvoiceData(JSON.parse(newRes as string));
                        setShowStartupScreen(false);
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(0, 0, 0)',
                        zIndex: 1,
                    }}>
                        <div style={{
                            marginTop: '3.20vh',
                            width: '90%',
                            display: 'flex',
                            alignItems: 'center',
                        }}>
                            <svg width="4.26vh" height="1.67vh" onClick={() => {
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "home"
                                    }
                                });
                                setShowTransferPage(false);
                            }} style={{
                                cursor: 'pointer'
                            }} viewBox="0 0 46 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7 16.5L1.34983 9.43729C1.14531 9.18163 1.14531 8.81837 1.34983 8.56271L7 1.5" stroke="#0A84FF" strokeWidth="2" strokeLinecap="round" />
                                <path d="M18.5356 14H14.2949V3.43115H18.5137C20.3887 3.43115 21.6191 4.47119 21.6191 6.06787C21.6191 7.18848 20.7915 8.19189 19.7368 8.36768V8.42627C21.1724 8.5874 22.1392 9.60547 22.1392 11.0117C22.1392 12.8721 20.7842 14 18.5356 14ZM15.9355 4.77148V7.92822H17.7739C19.1948 7.92822 19.9785 7.34229 19.9785 6.29492C19.9785 5.31348 19.3047 4.77148 18.1182 4.77148H15.9355ZM15.9355 12.6597H18.1987C19.6782 12.6597 20.4619 12.0518 20.4619 10.9092C20.4619 9.7666 19.6562 9.18066 18.1035 9.18066H15.9355V12.6597ZM26.0576 12.8794C27.1636 12.8794 28.0278 12.1177 28.0278 11.1143V10.5063L26.1309 10.6235C25.186 10.6895 24.6514 11.1069 24.6514 11.7661C24.6514 12.4399 25.208 12.8794 26.0576 12.8794ZM25.6182 14.1318C24.1094 14.1318 23.0547 13.1943 23.0547 11.8101C23.0547 10.4624 24.0874 9.63477 25.9185 9.53223L28.0278 9.40771V8.81445C28.0278 7.95752 27.4492 7.44482 26.4824 7.44482C25.5669 7.44482 24.9956 7.88428 24.8564 8.57275H23.3623C23.4502 7.18115 24.6367 6.15576 26.541 6.15576C28.4087 6.15576 29.6025 7.14453 29.6025 8.68994V14H28.0864V12.7329H28.0498C27.603 13.5898 26.6289 14.1318 25.6182 14.1318ZM37.7544 8.94629H36.2456C36.0845 8.12598 35.4692 7.47412 34.4365 7.47412C33.2134 7.47412 32.4077 8.49219 32.4077 10.1475C32.4077 11.8394 33.2207 12.8208 34.4512 12.8208C35.4253 12.8208 36.0625 12.2861 36.2456 11.3926H37.769C37.6006 13.0332 36.2896 14.1465 34.4365 14.1465C32.2319 14.1465 30.7964 12.6377 30.7964 10.1475C30.7964 7.70117 32.2319 6.15576 34.4219 6.15576C36.4067 6.15576 37.6152 7.43018 37.7544 8.94629ZM40.5449 9.59814L43.6577 6.29492H45.5181L42.3247 9.61279L45.6426 14H43.8042L41.1895 10.5796L40.5303 11.2314V14H38.9482V3.43115H40.5303V9.59814H40.5449Z" fill="#0A84FF" />
                            </svg>
                            <div style={{ fontSize: '1.60vh', fontWeight: 500, marginLeft: '6.22vh' }}>Transfer</div>
                        </div>
                        <div style={{ marginTop: '0.36vh', width: '90%', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                            <div style={{ display: 'flex', flexDirection: 'column' }}>
                                <div className="wallet-header">Welcome</div>
                                <div className="wallet-subheader">{walletDetails.name}</div>
                            </div>
                        </div>
                        <svg style={{
                            marginTop: '0.89vh',
                        }} onClick={() => {
                            setShowNewInvoicePage(true);
                        }} className='clickanimation' width="26.85vh" height="8.33vh" viewBox="0 0 271 80" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect width="271" height="80" rx="9" fill="url(#paint0_linear_309_1324)" fillOpacity="0.78" />
                            <path d="M75.4834 41.9897H77.6147C77.7173 42.8613 78.6255 43.4326 79.7974 43.4326C80.9766 43.4326 81.7822 42.8687 81.7822 42.0923C81.7822 41.4038 81.2769 41.0229 80.0024 40.7373L78.6255 40.437C76.6772 40.0195 75.7178 39.0308 75.7178 37.4854C75.7178 35.5371 77.4023 34.248 79.7607 34.248C82.2217 34.248 83.7671 35.5151 83.8037 37.4268H81.731C81.6577 36.5332 80.874 35.9912 79.7681 35.9912C78.6768 35.9912 77.9443 36.5112 77.9443 37.2949C77.9443 37.9468 78.457 38.313 79.6729 38.5913L80.9546 38.8623C83.0713 39.3164 83.9941 40.2246 83.9941 41.8359C83.9941 43.8867 82.3315 45.1831 79.7095 45.1831C77.168 45.1831 75.5493 43.9746 75.4834 41.9897ZM88.6963 38.562C87.7588 38.562 87.085 39.2725 87.0117 40.2539H90.3442C90.3003 39.2505 89.6484 38.562 88.6963 38.562ZM90.3735 42.5977H92.3364C92.1021 44.1357 90.6958 45.1685 88.7549 45.1685C86.3379 45.1685 84.8877 43.623 84.8877 41.1108C84.8877 38.606 86.3525 36.98 88.6743 36.98C90.9595 36.98 92.4023 38.5254 92.4023 40.9131V41.5649H86.9897V41.6968C86.9897 42.8174 87.7002 43.5864 88.7915 43.5864C89.5752 43.5864 90.1758 43.1982 90.3735 42.5977ZM93.5083 45V37.1484H95.5737V38.5474H95.6177C96.0352 37.5732 96.8628 37.002 98.0713 37.002C99.8145 37.002 100.796 38.1006 100.796 39.939V45H98.6572V40.3857C98.6572 39.3604 98.1738 38.7744 97.2144 38.7744C96.2549 38.7744 95.647 39.4775 95.647 40.4956V45H93.5083ZM105.066 45.1245C103.103 45.1245 101.865 43.5718 101.865 41.0596C101.865 38.5693 103.11 37.0239 105.081 37.0239C106.216 37.0239 107.095 37.6245 107.476 38.4961H107.52V34.4312H109.658V45H107.549V43.6523H107.512C107.131 44.5166 106.223 45.1245 105.066 45.1245ZM105.791 38.7378C104.714 38.7378 104.055 39.6387 104.055 41.0742C104.055 42.5171 104.714 43.4033 105.791 43.4033C106.853 43.4033 107.534 42.5098 107.534 41.0742C107.534 39.646 106.853 38.7378 105.791 38.7378ZM116.36 45H114.243V34.4312H116.089L121.025 41.3159H121.084V34.4312H123.201V45H121.37L116.426 38.0786H116.36V45ZM128.306 38.562C127.368 38.562 126.694 39.2725 126.621 40.2539H129.954C129.91 39.2505 129.258 38.562 128.306 38.562ZM129.983 42.5977H131.946C131.711 44.1357 130.305 45.1685 128.364 45.1685C125.947 45.1685 124.497 43.623 124.497 41.1108C124.497 38.606 125.962 36.98 128.284 36.98C130.569 36.98 132.012 38.5254 132.012 40.9131V41.5649H126.599V41.6968C126.599 42.8174 127.31 43.5864 128.401 43.5864C129.185 43.5864 129.785 43.1982 129.983 42.5977ZM144.089 37.1484L142.009 45H139.731L138.311 39.4482H138.267L136.853 45H134.604L132.517 37.1484H134.67L135.857 42.9712H135.901L137.292 37.1484H139.343L140.742 42.9712H140.786L141.98 37.1484H144.089ZM150.293 45H148.081V34.4312H150.293V45ZM151.868 45V37.1484H153.933V38.5474H153.977C154.395 37.5732 155.222 37.002 156.431 37.002C158.174 37.002 159.155 38.1006 159.155 39.939V45H157.017V40.3857C157.017 39.3604 156.533 38.7744 155.574 38.7744C154.614 38.7744 154.006 39.4775 154.006 40.4956V45H151.868ZM167.644 37.1484L164.949 45H162.532L159.814 37.1484H162.107L163.74 43.1104H163.784L165.41 37.1484H167.644ZM171.775 45.1685C169.402 45.1685 167.886 43.645 167.886 41.0669C167.886 38.5254 169.424 36.98 171.775 36.98C174.126 36.98 175.664 38.5181 175.664 41.0669C175.664 43.6523 174.148 45.1685 171.775 45.1685ZM171.775 43.5352C172.822 43.5352 173.489 42.6489 173.489 41.0742C173.489 39.5142 172.815 38.6133 171.775 38.6133C170.735 38.6133 170.054 39.5142 170.054 41.0742C170.054 42.6489 170.72 43.5352 171.775 43.5352ZM176.807 45V37.1484H178.945V45H176.807ZM177.876 36.2842C177.231 36.2842 176.733 35.7935 176.733 35.1782C176.733 34.5557 177.231 34.0723 177.876 34.0723C178.521 34.0723 179.019 34.5557 179.019 35.1782C179.019 35.7935 178.521 36.2842 177.876 36.2842ZM187.507 40.0708H185.522C185.398 39.2432 184.849 38.6572 183.97 38.6572C182.915 38.6572 182.256 39.5508 182.256 41.0669C182.256 42.6123 182.915 43.4912 183.977 43.4912C184.834 43.4912 185.391 42.9785 185.522 42.1216H187.515C187.405 43.9746 186.021 45.1685 183.955 45.1685C181.589 45.1685 180.088 43.6304 180.088 41.0669C180.088 38.5474 181.589 36.98 183.94 36.98C186.064 36.98 187.412 38.291 187.507 40.0708ZM192.07 38.562C191.133 38.562 190.459 39.2725 190.386 40.2539H193.718C193.674 39.2505 193.022 38.562 192.07 38.562ZM193.748 42.5977H195.71C195.476 44.1357 194.07 45.1685 192.129 45.1685C189.712 45.1685 188.262 43.623 188.262 41.1108C188.262 38.606 189.727 36.98 192.048 36.98C194.333 36.98 195.776 38.5254 195.776 40.9131V41.5649H190.364V41.6968C190.364 42.8174 191.074 43.5864 192.166 43.5864C192.949 43.5864 193.55 43.1982 193.748 42.5977Z" fill="#DAFEF4" />
                            <defs>
                                <linearGradient id="paint0_linear_309_1324" x1="48.0118" y1="-25.625" x2="225.886" y2="56.3497" gradientUnits="userSpaceOnUse">
                                    <stop stopColor="#2B5D81" />
                                    <stop offset="0.525294" stopColor="#2B646A" />
                                    <stop offset="1" stopColor="#2A1856" />
                                </linearGradient>
                            </defs>
                        </svg>
                        <div style={{
                            width: '90%',
                            display: 'flex',
                            marginTop: '1.42vh',
                            gap: '1.78vh',
                        }}>
                            <div style={{
                                fontSize: '1.24vh',
                                fontWeight: 400,
                                letterSpacing: '0.12vh',
                                backgroundColor: historyType === 'sent' ? 'rgba(255, 255, 255, 0.25)' : '',
                                textAlign: 'center',
                                width: '7.11vh',
                                height: '2.13vh',
                                borderRadius: '0.53vh',
                                cursor: 'pointer',
                            }} onClick={async () => {
                                const newRes = await fetchNui('getInvoices', 'sent');
                                setInvoiceData(JSON.parse(newRes as string));
                                setHistoryType('sent');
                            }}>Sent</div>
                            <div style={{
                                fontSize: '1.24vh',
                                fontWeight: 400,
                                letterSpacing: '0.12vh',
                                backgroundColor: historyType === 'received' ? 'rgba(255, 255, 255, 0.25)' : '',
                                textAlign: 'center',
                                width: '7.11vh',
                                height: '2.13vh',
                                borderRadius: '0.53vh',
                                cursor: 'pointer',
                            }} onClick={async () => {
                                const newRes = await fetchNui('getInvoices', 'received');
                                setInvoiceData(JSON.parse(newRes as string));
                                setHistoryType('received');
                            }}>Received</div>
                        </div>
                        <div style={{ width: '89%', fontSize: '1.16vh', color: 'rgba(255,255,255,0.3)', letterSpacing: '0.11vh', marginTop: '0.53vh' }}>Pending</div>
                        <div style={{
                            width: '90%',
                            height: '23.5%',
                            overflowY: 'auto',
                            overflowX: 'hidden',
                        }}>
                            {invoiceData && invoiceData.filter(
                                f => f.status === 'pending'
                            ).map((invoice, index: number) => {
                                return (
                                    <div style={{
                                        width: '100%',
                                        height: '6.76vh',
                                        backgroundColor: 'rgba(255, 255, 255, 0.18)',
                                        borderRadius: '0.53vh',
                                        paddingLeft: '0.89vh',
                                        paddingTop: '0.53vh',
                                        display: 'flex',
                                        flexDirection: 'column',
                                        marginTop: index === 0 ? '0.36vh' : '0.89vh',
                                    }} key={index}>
                                        <div style={{
                                            display: 'flex',
                                            width: '97%',
                                            justifyContent: 'space-between',
                                        }}>
                                            <Checkbox
                                                defaultChecked
                                                label={historyType === 'sent' ? invoice.targetName : invoice.sourceName}
                                                styles={{
                                                    input: {
                                                        outline: 'none',
                                                        color: 'red',
                                                        backgroundColor: 'rgb(100, 100, 100)',
                                                        border: 'none',
                                                    },
                                                    label: {
                                                        fontSize: '1.42vh',
                                                        fontWeight: 500,
                                                        letterSpacing: '0.09vh',
                                                    }
                                                }}
                                                checked={invoice.status === 'pending' ? false : true}
                                            />
                                            <div style={{
                                                height: '1.78vh',
                                                fontSize: '1.24vh',
                                                fontWeight: 500,
                                                marginLeft: '0.89vh',
                                                textAlign: 'right',
                                            }}>
                                                <NumberFormatter value={invoice.amount} thousandSeparator prefix="$ " />
                                            </div>
                                        </div>
                                        <div style={{
                                            display: 'flex',
                                        }}>
                                            <div style={{
                                                marginTop: '0.36vh',
                                                width: '70%',
                                                height: '3.73vh',
                                                lineHeight: '1.24vh',
                                                overflow: 'hidden',
                                                textOverflow: 'ellipsis',
                                                fontSize: '1.07vh',
                                                fontWeight: 400,
                                            }}>
                                                {invoice.description}
                                            </div>
                                            <div style={{ gap: '0.36vh', marginLeft: '0.36vh', display: 'flex', height: '3.91vh', alignItems: 'end' }}>
                                                {historyType === 'sent' ?
                                                    <svg style={{
                                                        marginLeft: '3.20vh',
                                                    }} width="3.52vh" height="1.39vh" viewBox="0 0 38 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                        <rect width="38" height="15" rx="3" fill="#91C0FF" fillOpacity="0.28" />
                                                        <path d="M5.51953 4.86328H7.63281C8.72656 4.86328 9.48828 5.61719 9.48828 6.71484C9.48828 7.81641 8.71094 8.57422 7.60547 8.57422H6.39453V10.5H5.51953V4.86328ZM6.39453 5.60156V7.83984H7.39844C8.16016 7.83984 8.59375 7.42969 8.59375 6.71875C8.59375 6.00781 8.16016 5.60156 7.40234 5.60156H6.39453ZM11.6914 6.99609C11.1016 6.99609 10.6875 7.44531 10.6445 8.06641H12.6992C12.6797 7.4375 12.2812 6.99609 11.6914 6.99609ZM12.6953 9.29297H13.4961C13.3789 10.043 12.668 10.5781 11.7266 10.5781C10.5195 10.5781 9.78906 9.76172 9.78906 8.46484C9.78906 7.17578 10.5312 6.31641 11.6914 6.31641C12.832 6.31641 13.543 7.12109 13.543 8.36719V8.65625H10.6406V8.70703C10.6406 9.42188 11.0703 9.89453 11.7461 9.89453C12.2266 9.89453 12.582 9.65234 12.6953 9.29297ZM14.1992 10.5V6.39062H15.0039V7.07812H15.0234C15.2461 6.60938 15.6836 6.32031 16.3164 6.32031C17.2227 6.32031 17.7422 6.89844 17.7422 7.83984V10.5H16.8945V8.00391C16.8945 7.38672 16.6055 7.04688 16.0195 7.04688C15.4258 7.04688 15.043 7.46875 15.043 8.10547V10.5H14.1992ZM20.1016 10.5703C19.0625 10.5703 18.375 9.74219 18.375 8.44531C18.375 7.14844 19.0625 6.32422 20.0938 6.32422C20.6836 6.32422 21.1523 6.62109 21.3828 7.07422H21.3984V4.86328H22.2461V10.5H21.4258V9.80078H21.4102C21.168 10.2695 20.6992 10.5703 20.1016 10.5703ZM20.3242 7.03516C19.6562 7.03516 19.2383 7.58203 19.2383 8.44531C19.2383 9.3125 19.6562 9.85547 20.3242 9.85547C20.9727 9.85547 21.4062 9.30469 21.4062 8.44531C21.4062 7.59375 20.9727 7.03516 20.3242 7.03516ZM23.1406 10.5V6.39062H23.9844V10.5H23.1406ZM23.5625 5.78906C23.293 5.78906 23.0742 5.57422 23.0742 5.30859C23.0742 5.03906 23.293 4.82422 23.5625 4.82422C23.8359 4.82422 24.0547 5.03906 24.0547 5.30859C24.0547 5.57422 23.8359 5.78906 23.5625 5.78906ZM24.8477 10.5V6.39062H25.6523V7.07812H25.6719C25.8945 6.60938 26.332 6.32031 26.9648 6.32031C27.8711 6.32031 28.3906 6.89844 28.3906 7.83984V10.5H27.543V8.00391C27.543 7.38672 27.2539 7.04688 26.668 7.04688C26.0742 7.04688 25.6914 7.46875 25.6914 8.10547V10.5H24.8477ZM30.957 9.81641C31.6172 9.81641 32.0508 9.28125 32.0508 8.43359C32.0508 7.58984 31.6172 7.03516 30.957 7.03516C30.3086 7.03516 29.8867 7.57812 29.8867 8.43359C29.8867 9.29297 30.3086 9.81641 30.957 9.81641ZM30.9648 12.0469C29.9961 12.0469 29.2773 11.5312 29.1719 10.8203H30.0195C30.1406 11.1641 30.5156 11.3906 30.9961 11.3906C31.6562 11.3906 32.0469 11.0156 32.0469 10.4531V9.77734H32.0312C31.8008 10.2227 31.3164 10.5156 30.7305 10.5156C29.6992 10.5156 29.0234 9.71094 29.0234 8.42969C29.0234 7.13672 29.6953 6.32422 30.75 6.32422C31.332 6.32422 31.8086 6.61719 32.0586 7.09375H32.0742V6.39062H32.8945V10.4258C32.8945 11.4062 32.1367 12.0469 30.9648 12.0469Z" fill="white" />
                                                    </svg>
                                                    : <>
                                                        <svg onClick={async () => {
                                                            const res = await fetchNui('declineInvoicePayment', invoice._id);
                                                            if (res) {
                                                                const newRes = await fetchNui('getInvoices', 'received');
                                                                setInvoiceData(JSON.parse(newRes as string));
                                                            }
                                                        }} className='clickanimation' width="3.24vh" height="1.39vh" viewBox="0 0 35 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <rect width="35" height="15" rx="3" fill="#FFDDDD" fillOpacity="0.28" />
                                                            <path d="M5.51953 4.86328H7.50781C9.18359 4.86328 10.1758 5.89453 10.1758 7.67188C10.1758 9.45312 9.1875 10.5 7.50781 10.5H5.51953V4.86328ZM6.39453 5.61719V9.74219H7.42578C8.62109 9.74219 9.28125 9.01172 9.28125 7.67969C9.28125 6.35156 8.61719 5.61719 7.42578 5.61719H6.39453ZM12.6289 6.99609C12.0391 6.99609 11.625 7.44531 11.582 8.06641H13.6367C13.6172 7.4375 13.2188 6.99609 12.6289 6.99609ZM13.6328 9.29297H14.4336C14.3164 10.043 13.6055 10.5781 12.6641 10.5781C11.457 10.5781 10.7266 9.76172 10.7266 8.46484C10.7266 7.17578 11.4688 6.31641 12.6289 6.31641C13.7695 6.31641 14.4805 7.12109 14.4805 8.36719V8.65625H11.5781V8.70703C11.5781 9.42188 12.0078 9.89453 12.6836 9.89453C13.1641 9.89453 13.5195 9.65234 13.6328 9.29297ZM18.6641 7.80469H17.8594C17.7734 7.36719 17.4453 7.01953 16.8945 7.01953C16.2422 7.01953 15.8125 7.5625 15.8125 8.44531C15.8125 9.34766 16.2461 9.87109 16.9023 9.87109C17.4219 9.87109 17.7617 9.58594 17.8594 9.10938H18.6719C18.582 9.98438 17.8828 10.5781 16.8945 10.5781C15.7188 10.5781 14.9531 9.77344 14.9531 8.44531C14.9531 7.14062 15.7188 6.31641 16.8867 6.31641C17.9453 6.31641 18.5898 6.99609 18.6641 7.80469ZM19.3008 10.5V4.86328H20.1445V10.5H19.3008ZM21.0391 10.5V6.39062H21.8828V10.5H21.0391ZM21.4609 5.78906C21.1914 5.78906 20.9727 5.57422 20.9727 5.30859C20.9727 5.03906 21.1914 4.82422 21.4609 4.82422C21.7344 4.82422 21.9531 5.03906 21.9531 5.30859C21.9531 5.57422 21.7344 5.78906 21.4609 5.78906ZM22.7461 10.5V6.39062H23.5508V7.07812H23.5703C23.793 6.60938 24.2305 6.32031 24.8633 6.32031C25.7695 6.32031 26.2891 6.89844 26.2891 7.83984V10.5H25.4414V8.00391C25.4414 7.38672 25.1523 7.04688 24.5664 7.04688C23.9727 7.04688 23.5898 7.46875 23.5898 8.10547V10.5H22.7461ZM28.8242 6.99609C28.2344 6.99609 27.8203 7.44531 27.7773 8.06641H29.832C29.8125 7.4375 29.4141 6.99609 28.8242 6.99609ZM29.8281 9.29297H30.6289C30.5117 10.043 29.8008 10.5781 28.8594 10.5781C27.6523 10.5781 26.9219 9.76172 26.9219 8.46484C26.9219 7.17578 27.6641 6.31641 28.8242 6.31641C29.9648 6.31641 30.6758 7.12109 30.6758 8.36719V8.65625H27.7734V8.70703C27.7734 9.42188 28.2031 9.89453 28.8789 9.89453C29.3594 9.89453 29.7148 9.65234 29.8281 9.29297Z" fill="white" />
                                                        </svg>
                                                        <svg onClick={async () => {
                                                            const res = await fetchNui('acceptInvoicePayment', invoice._id);
                                                            if (res) {
                                                                setInvoiceData((prevData) =>
                                                                    prevData.map((invoice) =>
                                                                        invoice._id === invoice._id
                                                                            ? { ...invoice, status: 'paid' }
                                                                            : invoice
                                                                    )
                                                                );
                                                            }
                                                        }} className='clickanimation' width="3.24vh" height="1.39vh" viewBox="0 0 35 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <rect width="35" height="15" rx="3" fill="#D3FFCD" fillOpacity="0.28" />
                                                            <path d="M11.5195 4.86328H13.6328C14.7266 4.86328 15.4883 5.61719 15.4883 6.71484C15.4883 7.81641 14.7109 8.57422 13.6055 8.57422H12.3945V10.5H11.5195V4.86328ZM12.3945 5.60156V7.83984H13.3984C14.1602 7.83984 14.5938 7.42969 14.5938 6.71875C14.5938 6.00781 14.1602 5.60156 13.4023 5.60156H12.3945ZM17.2617 9.90234C17.8516 9.90234 18.3125 9.49609 18.3125 8.96094V8.63672L17.3008 8.69922C16.7969 8.73438 16.5117 8.95703 16.5117 9.30859C16.5117 9.66797 16.8086 9.90234 17.2617 9.90234ZM17.0273 10.5703C16.2227 10.5703 15.6602 10.0703 15.6602 9.33203C15.6602 8.61328 16.2109 8.17188 17.1875 8.11719L18.3125 8.05078V7.73438C18.3125 7.27734 18.0039 7.00391 17.4883 7.00391C17 7.00391 16.6953 7.23828 16.6211 7.60547H15.8242C15.8711 6.86328 16.5039 6.31641 17.5195 6.31641C18.5156 6.31641 19.1523 6.84375 19.1523 7.66797V10.5H18.3438V9.82422H18.3242C18.0859 10.2812 17.5664 10.5703 17.0273 10.5703ZM20.3789 12.0312C20.3125 12.0312 20.0977 12.0234 20.0352 12.0117V11.3281C20.0977 11.3438 20.2383 11.3438 20.3086 11.3438C20.7031 11.3438 20.9102 11.1797 21.0391 10.7578C21.0391 10.75 21.1133 10.5078 21.1133 10.5039L19.6289 6.39062H20.543L21.5859 9.73438H21.5977L22.6406 6.39062H23.5312L21.9883 10.7148C21.6367 11.7109 21.2344 12.0312 20.3789 12.0312Z" fill="white" />
                                                        </svg>
                                                    </>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                )
                            })}
                        </div>
                        <div style={{ width: '89%', fontSize: '1.16vh', color: 'rgba(255,255,255,0.3)', letterSpacing: '0.11vh', marginTop: '0.18vh' }}>History</div>
                        <div style={{
                            width: '90%',
                            height: '24%',
                            overflowY: 'auto',
                            overflowX: 'hidden',
                        }}>
                            {invoiceData && invoiceData.filter(
                                (invoice) => invoice.status === 'paid' || invoice.status === 'declined'
                            ).map((invoice, index: number) => {
                                return (
                                    <div style={{
                                        width: '100%',
                                        height: '3.20vh',
                                        backgroundColor: 'rgba(255, 255, 255, 0.18)',
                                        borderRadius: '0.53vh',
                                        paddingLeft: '0.89vh',
                                        paddingTop: '0.53vh',
                                        display: 'flex',
                                        flexDirection: 'column',
                                        marginTop: index === 0 ? '0.36vh' : '0.89vh',
                                    }} key={index}>
                                        <div style={{
                                            display: 'flex',
                                            width: '97%',
                                            justifyContent: 'space-between',
                                        }}>
                                            <Checkbox
                                                defaultChecked
                                                label={historyType === 'sent' ? invoice.targetName : invoice.sourceName}
                                                indeterminate={invoice.status === 'paid' ? false : true}
                                                styles={{
                                                    input: {
                                                        outline: 'none',
                                                        color: 'red',
                                                        backgroundColor: 'rgb(100, 100, 100)',
                                                        border: 'none',
                                                    },
                                                    label: {
                                                        fontSize: '1.42vh',
                                                        fontWeight: 500,
                                                        letterSpacing: '0.09vh',
                                                    }
                                                }}
                                                checked={invoice.status === 'pending' ? false : true}
                                            />
                                            <div style={{
                                                height: '1.78vh',
                                                fontSize: '1.24vh',
                                                fontWeight: 500,
                                                marginLeft: '0.89vh',
                                                textAlign: 'right',
                                            }}>
                                                <NumberFormatter value={invoice.amount} thousandSeparator prefix="$ " />
                                            </div>
                                        </div>
                                    </div>
                                )
                            })}
                        </div>
                    </div>}
                </Transition>

                <Transition
                    mounted={showNewInvoicePage}
                    transition="fade"
                    duration={400}
                    timingFunction="ease"
                    onEnter={async () => {
                        const res = await fetchNui('getContacts');
                        setContactsData(JSON.parse(res as string));
                        const newRes = await fetchNui('getInvoices');
                        /* setInvoicesData(JSON.parse(newRes as string)); */
                        setShowStartupScreen(false);
                    }}
                >
                    {(styles) => <div style={{
                        ...styles,
                        width: '100%',
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        position: 'absolute',
                        backgroundColor: 'rgb(0, 0, 0)',
                        zIndex: 5,
                    }}>
                        <div style={{
                            marginTop: '3.56vh',
                            width: '90%',
                            display: 'flex',
                            alignItems: 'center',
                        }}>
                            <svg width="4.26vh" height="1.67vh" onClick={() => {
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "invoice"
                                    }
                                });
                                setShowNewInvoicePage(false);
                            }} style={{
                                cursor: 'pointer'
                            }} viewBox="0 0 46 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7 16.5L1.34983 9.43729C1.14531 9.18163 1.14531 8.81837 1.34983 8.56271L7 1.5" stroke="#0A84FF" strokeWidth="2" strokeLinecap="round" />
                                <path d="M18.5356 14H14.2949V3.43115H18.5137C20.3887 3.43115 21.6191 4.47119 21.6191 6.06787C21.6191 7.18848 20.7915 8.19189 19.7368 8.36768V8.42627C21.1724 8.5874 22.1392 9.60547 22.1392 11.0117C22.1392 12.8721 20.7842 14 18.5356 14ZM15.9355 4.77148V7.92822H17.7739C19.1948 7.92822 19.9785 7.34229 19.9785 6.29492C19.9785 5.31348 19.3047 4.77148 18.1182 4.77148H15.9355ZM15.9355 12.6597H18.1987C19.6782 12.6597 20.4619 12.0518 20.4619 10.9092C20.4619 9.7666 19.6562 9.18066 18.1035 9.18066H15.9355V12.6597ZM26.0576 12.8794C27.1636 12.8794 28.0278 12.1177 28.0278 11.1143V10.5063L26.1309 10.6235C25.186 10.6895 24.6514 11.1069 24.6514 11.7661C24.6514 12.4399 25.208 12.8794 26.0576 12.8794ZM25.6182 14.1318C24.1094 14.1318 23.0547 13.1943 23.0547 11.8101C23.0547 10.4624 24.0874 9.63477 25.9185 9.53223L28.0278 9.40771V8.81445C28.0278 7.95752 27.4492 7.44482 26.4824 7.44482C25.5669 7.44482 24.9956 7.88428 24.8564 8.57275H23.3623C23.4502 7.18115 24.6367 6.15576 26.541 6.15576C28.4087 6.15576 29.6025 7.14453 29.6025 8.68994V14H28.0864V12.7329H28.0498C27.603 13.5898 26.6289 14.1318 25.6182 14.1318ZM37.7544 8.94629H36.2456C36.0845 8.12598 35.4692 7.47412 34.4365 7.47412C33.2134 7.47412 32.4077 8.49219 32.4077 10.1475C32.4077 11.8394 33.2207 12.8208 34.4512 12.8208C35.4253 12.8208 36.0625 12.2861 36.2456 11.3926H37.769C37.6006 13.0332 36.2896 14.1465 34.4365 14.1465C32.2319 14.1465 30.7964 12.6377 30.7964 10.1475C30.7964 7.70117 32.2319 6.15576 34.4219 6.15576C36.4067 6.15576 37.6152 7.43018 37.7544 8.94629ZM40.5449 9.59814L43.6577 6.29492H45.5181L42.3247 9.61279L45.6426 14H43.8042L41.1895 10.5796L40.5303 11.2314V14H38.9482V3.43115H40.5303V9.59814H40.5449Z" fill="#0A84FF" />
                            </svg>
                        </div>
                        <div style={{
                            width: '90%',
                            display: 'flex',
                            justifyContent: 'space-between'
                        }}>
                            <Autocomplete
                                label="Sender"
                                placeholder="Pick value"
                                data={[
                                    'Me'
                                ]}
                                styles={{
                                    root: {
                                        width: '45%',
                                        marginTop: '0.89vh',
                                        height: '7.11vh',
                                    },
                                    label: {
                                        fontSize: '1.24vh',
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                        color: 'white',
                                    },
                                    input: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                        fontSize: '1.24vh',
                                        height: '3.56vh',
                                        minHeight: '10px',
                                        outline: 'none',
                                        borderRadius: '0.89vh',
                                    }
                                }}
                                disabled
                                defaultValue="Me"
                                value="Me"
                            />
                            <NumberInput
                                label="Receiver ID"
                                rightSection={<></>}
                                value={billingData.receiver}
                                onChange={(e) => {
                                    setBillingData({
                                        ...billingData,
                                        receiver: Number(e)
                                    })
                                }}
                                styles={{
                                    root: {
                                        width: '45%',
                                        marginTop: '0.89vh',
                                        height: '7.11vh',
                                    },
                                    label: {
                                        fontSize: '1.24vh',
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                        color: 'white',
                                    },
                                    input: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                        fontSize: '1.24vh',
                                        height: '3.56vh',
                                        minHeight: '10px',
                                        outline: 'none',
                                        borderRadius: '0.89vh',
                                    }
                                }}
                            />
                        </div>
                        <div className="divider" style={{ marginTop: '1.78vh' }} />
                        <div style={{
                            width: '90%',
                            marginTop: '1.78vh',
                            display: 'flex',
                            justifyContent: 'space-between'
                        }}>
                            <NumberInput
                                label="Amount"
                                placeholder="$ 0"
                                styles={{
                                    root: {
                                        width: '48%',
                                        height: '5.33vh',
                                    },
                                    label: {
                                        fontSize: '1.24vh',
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                        color: 'white',
                                    },
                                    input: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                        outline: 'none',
                                        height: '3.38vh',
                                        fontSize: '1.60vh',
                                        minHeight: '10px',
                                        borderRadius: '0.89vh',
                                    }
                                }}
                                value={billingData.amount}
                                onChange={(e) => {
                                    setBillingData({
                                        ...billingData,
                                        amount: Number(e),
                                    });
                                }}
                                rightSection={<></>}
                                onFocus={() => fetchNui('disableControls', true)} onBlur={() => fetchNui('disableControls', false)}
                            />
                            <Select
                                label="Billing For Business"
                                placeholder=""
                                value={billingData.isBusiness}
                                onOptionSubmit={(value) => {
                                    setBillingData({
                                        ...billingData,
                                        isBusiness: value
                                    })
                                }}
                                styles={{
                                    root: {
                                        width: '48%',
                                        height: '5.33vh',
                                    },
                                    label: {
                                        fontSize: '1.24vh',
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                        color: 'white',
                                    },
                                    input: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                        outline: 'none',
                                        height: '3.56vh',
                                        fontSize: '1.24vh',
                                        minHeight: '10px',
                                        borderRadius: '0.89vh',
                                    },
                                    dropdown: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                    },
                                    option: {
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                    }
                                }}
                                data={[
                                    "Yes",
                                    "No"
                                ]}
                                rightSection={<></>}
                                onFocus={() => fetchNui('disableControls', true)} onBlur={() => fetchNui('disableControls', false)}
                            />

                        </div>
                        <div style={{
                            width: '90%',
                            marginTop: '1.78vh',
                            display: 'flex',
                            flexDirection: 'row',
                            justifyContent: 'space-between',
                        }}>
                            <Select
                                label="Number of Payments"
                                placeholder=""
                                defaultValue="1"
                                data={[
                                    '1',
                                    '2',
                                    '3',
                                    '4',
                                    '5',
                                    '6',
                                    '7',
                                    '8',
                                    '9',
                                    '10',
                                ]}
                                styles={{
                                    root: {
                                        width: '48%',
                                        marginTop: '0.36vh',

                                    },
                                    label: {
                                        fontSize: '1.07vh',
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                        color: 'white',
                                    },
                                    input: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                        height: '3.38vh',
                                        fontSize: '1.60vh',
                                        minHeight: '10px',
                                        outline: 'none',
                                        borderRadius: '0.89vh',
                                    },
                                    dropdown: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                    },
                                    option: {
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                    }
                                }}
                                clearable
                                value={billingData.numberOfPayments}
                                onChange={(e) => {
                                    setBillingData({
                                        ...billingData,
                                        numberOfPayments: e,
                                    });
                                }}
                                onFocus={() => fetchNui('disableControls', true)} onBlur={() => fetchNui('disableControls', false)}
                                rightSection={<></>}
                            />
                            <Select
                                label="Each Payment Period"
                                placeholder=""
                                data={[
                                    //@ts-ignore
                                    { label: 'Daily', value: '0' },
                                    //@ts-ignore
                                    { label: 'Weekly', value: '1' },
                                    //@ts-ignore
                                    { label: 'Monthly', value: '2' },
                                    //@ts-ignore
                                    { label: 'Quarterly', value: '3' },
                                    //@ts-ignore
                                    { label: 'Yearly', value: '4' },
                                ]}
                                styles={{
                                    root: {
                                        width: '48%',
                                        marginTop: '0.36vh',
                                    },
                                    label: {
                                        fontSize: '1.07vh',
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                        color: 'white',
                                    },
                                    input: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                        outline: 'none',
                                        borderRadius: '0.89vh',
                                        height: '3.38vh',
                                        fontSize: '1.60vh',
                                        minHeight: '10px',
                                    },
                                    dropdown: {
                                        backgroundColor: 'rgb(48, 48, 48)',
                                        color: 'white',
                                        border: 'none',
                                    },
                                    option: {
                                        fontWeight: 500,
                                        letterSpacing: '0.09vh',
                                    }
                                }}
                                defaultValue="Daily"
                                clearable
                                value={billingData.paymentTime}
                                onChange={(e) => {
                                    setBillingData({
                                        ...billingData,
                                        paymentTime: e,
                                    });
                                }}
                                rightSection={<></>}
                                onFocus={() => fetchNui('disableControls', true)} onBlur={() => fetchNui('disableControls', false)}
                            />
                        </div>
                        <div className="divider" style={{ marginTop: '1.78vh' }} />
                        <Textarea styles={{
                            root: {
                                width: '90%',
                                height: '14.22vh',
                                marginTop: '1.78vh',
                            },
                            label: {
                                fontSize: '1.24vh',
                                fontWeight: 500,
                                letterSpacing: '0.09vh',
                                color: 'white',
                            },
                            input: {
                                backgroundColor: 'rgb(48, 48, 48)',
                                color: 'white',
                                border: 'none',
                                outline: 'none',
                                height: '8.89vh',
                                borderRadius: '0.89vh',
                                fontSize: '1.24vh',
                                minHeight: '10px',
                            }
                        }} value={billingData.description} onChange={(e) => {
                            setBillingData({
                                ...billingData,
                                description: e.currentTarget.value,
                            })
                        }} label="Description" placeholder="Enter a description" onFocus={() => fetchNui('disableControls', true)} onBlur={() => fetchNui('disableControls', false)} />
                        <div style={{
                            display: 'flex',
                            gap: '4.98vh',
                        }}>
                            <Button style={{
                                width: '10.83vh',
                                height: '4.26vh',
                                borderRadius: '0.65vh',
                                background: '#343434',
                                fontSize: '1.24vh',
                            }} onClick={async () => {
                                setLocation({
                                    app: "wallet",
                                    page: {
                                        ...location.page,
                                        wallet: "invoice"
                                    }
                                });
                                setShowNewInvoicePage(false);
                            }}>
                                Cancel
                            </Button>
                            <Button style={{
                                width: '10.83vh',
                                height: '4.26vh',
                                fontSize: '1.24vh',
                                borderRadius: '0.65vh',
                                background: '#394538'
                            }} onClick={async () => {
                                if (billingData.receiver === 0 || billingData.amount === 0) {
                                    return;
                                }
                                const res = await fetchNui('createInvoice', JSON.stringify(billingData));
                                if (res) {
                                    setLocation({
                                        app: "wallet",
                                        page: {
                                            ...location.page,
                                            wallet: "invoice"
                                        }
                                    });
                                    setShowNewInvoicePage(false);
                                } else {
                                    fetchNui('showNoti', { app: 'settings', title: 'Wallet Error', description: 'Something Went Wrong !' });
                                }
                            }}>
                                Send
                            </Button>
                        </div>
                    </div>}
                </Transition>
                {location.page.wallet !== '' && (
                    <Navigation location={location.page.wallet} onClick={(e) => {
                        setLocation({
                            app: 'wallet',
                            page: {
                                ...location.page,
                                wallet: e
                            }
                        });
                    }} />
                )}
            </div>
        </CSSTransition>
    );
};